<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=unicode">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 14">
<meta name=Originator content="Microsoft Word 14">
<link rel=File-List href="MOGLi%20Code%20Creator-Dateien/filelist.xml">
<title>MOGLi Code Creator</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Reik</o:Author>
  <o:LastAuthor>Oberrath, Reik</o:LastAuthor>
  <o:Revision>38</o:Revision>
  <o:Created>2012-12-05T10:57:00Z</o:Created>
  <o:LastSaved>2015-01-20T15:12:00Z</o:LastSaved>
  <o:Pages>5</o:Pages>
  <o:Words>3848</o:Words>
  <o:Characters>24246</o:Characters>
  <o:Company>WIR</o:Company>
  <o:Lines>202</o:Lines>
  <o:Paragraphs>56</o:Paragraphs>
  <o:CharactersWithSpaces>28038</o:CharactersWithSpaces>
  <o:Version>14.00</o:Version>
 </o:DocumentProperties>
 <o:OfficeDocumentSettings>
  <o:AllowPNG/>
 </o:OfficeDocumentSettings>
</xml><![endif]-->
<link rel=themeData href="MOGLi%20Code%20Creator-Dateien/themedata.thmx">
<link rel=colorSchemeMapping
href="MOGLi%20Code%20Creator-Dateien/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>103</w:Zoom>
  <w:DisplayBackgroundShape/>
  <w:GrammarState>Clean</w:GrammarState>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>DE</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SelectEntireFieldWithStartOrEnd/>
   <w:UseWord2002TableStyleRules/>
   <w:DontUseIndentAsNumberingTabStop/>
   <w:FELineBreak11/>
   <w:WW11IndentRules/>
   <w:DontAutofitConstrainedTables/>
   <w:AutofitLikeWW11/>
   <w:UnderlineTabInNumList/>
   <w:HangulWidthLikeWW11/>
   <w:UseNormalStyleForList/>
   <w:SplitPgBreakAndParaMark/>
   <w:DontVertAlignCellWithSp/>
   <w:DontBreakConstrainedForcedTables/>
   <w:DontVertAlignInTxbx/>
   <w:Word11KerningPairs/>
   <w:CachedColBalance/>
  </w:Compatibility>
  <w:DocumentVariables>
   <w:dgnword-docGUID>{DBF49B32-A4C4-497B-8F23-F9AAA0155D78}</w:dgnword-docGUID>
   <w:dgnword-eventsink>97890544</w:dgnword-eventsink>
  </w:DocumentVariables>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr>  <u1:mathPr>
   <u1:mathFont u1:val="Cambria Math"/>
   <u1:brkBin u1:val="before"/>
   <u1:brkBinSub u1:val="--"/>
   <u1:smallFrac u1:val="off"/>
   <u1:dispDef/>
   <u1:lMargin u1:val="0"/>
   <u1:rMargin u1:val="0"/>
   <u1:defJc u1:val="centerGroup"/>
   <u1:wrapIndent u1:val="1440"/>
   <u1:intLim u1:val="subSup"/>
   <u1:naryLim u1:val="undOvr"/>
  </u1:mathPr>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="false"
  DefSemiHidden="false" DefQFormat="false" LatentStyleCount="267">
  <w:LsdException Locked="false" Priority="9" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" Priority="99" Name="Body Text Indent"/>
  <w:LsdException Locked="false" Priority="99" Name="Hyperlink"/>
  <w:LsdException Locked="false" Priority="99" Name="FollowedHyperlink"/>
  <w:LsdException Locked="false" Priority="99" Name="No List"/>
  <w:LsdException Locked="false" Priority="99" SemiHidden="true"
   Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="99" SemiHidden="true" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" QFormat="true"
   Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" QFormat="true"
   Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" QFormat="true"
   Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" QFormat="true"
   Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" QFormat="true"
   Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" QFormat="true"
   Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" SemiHidden="true"
   UnhideWhenUsed="true" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="TOC Heading"/>
 </w:LatentStyles>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:-536870145 1073743103 0 0 415 0;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-520081665 -1073717157 41 0 66047 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Überschrift 1 Zchn";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	mso-font-kerning:0pt;
	mso-ansi-language:EN-GB;}
h2
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-link:"Überschrift 2 Zchn";
	mso-style-next:Standard;
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-fareast-theme-font:minor-fareast;
	mso-ansi-language:IT;
	font-weight:normal;}
p.MsoBodyTextIndent, li.MsoBodyTextIndent, div.MsoBodyTextIndent
	{mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-link:"Textkörper-Zeileneinzug Zchn";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-indent:-.6pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman","serif";
	mso-fareast-font-family:"Times New Roman";
	mso-ansi-language:EN-GB;}
a:link, span.MsoHyperlink
	{mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-unhide:no;
	color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-unhide:no;
	color:purple;
	text-decoration:underline;
	text-underline:single;}
p.MsoDocumentMap, li.MsoDocumentMap, div.MsoDocumentMap
	{mso-style-noshow:yes;
	mso-style-unhide:no;
	mso-style-link:"Dokumentstruktur Zchn";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	background:navy;
	font-size:10.0pt;
	font-family:"Tahoma","sans-serif";
	mso-fareast-font-family:"Times New Roman";}
span.berschrift1Zchn
	{mso-style-name:"Überschrift 1 Zchn";
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Überschrift 1";
	mso-ansi-font-size:14.0pt;
	mso-bidi-font-size:14.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:Cambria;
	mso-bidi-font-family:"Times New Roman";
	color:#365F91;
	font-weight:bold;}
span.berschrift2Zchn
	{mso-style-name:"Überschrift 2 Zchn";
	mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:"Überschrift 2";
	mso-ansi-font-size:13.0pt;
	mso-bidi-font-size:13.0pt;
	font-family:"Cambria","serif";
	mso-ascii-font-family:Cambria;
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:Cambria;
	mso-bidi-font-family:"Times New Roman";
	color:#4F81BD;
	font-weight:bold;}
span.Textkrper-ZeileneinzugZchn
	{mso-style-name:"Textkörper-Zeileneinzug Zchn";
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:Textkörper-Zeileneinzug;
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;}
span.DokumentstrukturZchn
	{mso-style-name:"Dokumentstruktur Zchn";
	mso-style-unhide:no;
	mso-style-locked:yes;
	mso-style-link:Dokumentstruktur;
	mso-ansi-font-size:8.0pt;
	mso-bidi-font-size:8.0pt;
	font-family:"Tahoma","sans-serif";
	mso-ascii-font-family:Tahoma;
	mso-hansi-font-family:Tahoma;
	mso-bidi-font-family:Tahoma;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:70.85pt 70.85pt 2.0cm 70.85pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:7298183;
	mso-list-type:hybrid;
	mso-list-template-ids:-892562338 67567639 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l0:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l0:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l0:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1
	{mso-list-id:1002585524;
	mso-list-type:hybrid;
	mso-list-template-ids:610554714 67567639 513730476 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l1:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level2
	{mso-level-number-format:roman-upper;
	mso-level-text:"%2\)";
	mso-level-tab-stop:90.0pt;
	mso-level-number-position:left;
	margin-left:90.0pt;
	text-indent:-36.0pt;}
@list l1:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l1:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l1:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2
	{mso-list-id:1629125201;
	mso-list-type:hybrid;
	mso-list-template-ids:-654912784 67567631 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l2:level1
	{mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l2:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l2:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3
	{mso-list-id:2007052397;
	mso-list-type:hybrid;
	mso-list-template-ids:-376000008 67567639 67567641 67567643 67567631 67567641 67567643 67567631 67567641 67567643;}
@list l3:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:36.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level2
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:72.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level3
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:108.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3:level4
	{mso-level-tab-stop:144.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level5
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:180.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level6
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:216.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
@list l3:level7
	{mso-level-tab-stop:252.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level8
	{mso-level-number-format:alpha-lower;
	mso-level-tab-stop:288.0pt;
	mso-level-number-position:left;
	text-indent:-18.0pt;}
@list l3:level9
	{mso-level-number-format:roman-lower;
	mso-level-tab-stop:324.0pt;
	mso-level-number-position:right;
	text-indent:-9.0pt;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Normale Tabelle";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
table.Tabellengitternetz
	{mso-style-name:Tabellengitternetz;
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-unhide:no;
	border:solid windowtext 1.0pt;
	mso-border-alt:solid windowtext .5pt;
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-border-insideh:.5pt solid windowtext;
	mso-border-insidev:.5pt solid windowtext;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1026"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=DE link=blue vlink=purple style='tab-interval:35.4pt'>

<div class=WordSection1>

<h1><a name=c0><span lang=EN-GB style='font-size:14.0pt;mso-bidi-font-size:
12.0pt'>The MOGLi Code Creator<o:p></o:p></span></a></h1>

<span style='mso-bookmark:c0'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span class=GramE><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Just another code generator?</span></span><span lang=EN-GB
style='mso-ansi-language:EN-GB'> – NO! – It’s THE Lightweight autogeneration
tool!<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>It is a
small standalone Tool for a quick start into model based development!<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>It’s
written in Java but made to generate more than only Java code.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>MOGLi stands
for the following attributes:<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>M</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> odel based<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>O</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> pen for extension<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>G</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> enerator based<o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>Li</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'> ghtweight<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Current version:
1.5.0<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<h1><span lang=EN-GB style='font-size:14.0pt'>Content<o:p></o:p></span></h1>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c1"><span
style='mso-bookmark:_Ref357515198'>Why is MOGLiCC lightweight?</span><span
style='mso-bookmark:_Ref357515198'></span></a><![if !supportNestedAnchors]><a
name="_Ref357515198"></a><![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c2">Why is MOGLiCC open?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c3">How does MOGLiCC work?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c4">How to apply MOGLiCC?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.1 <a href="#c4_1">Writing a model file</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.2 <a href="#c4_2">Writing a template file</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.3 <a href="#c4_3">The MetaInfo Validation
Feature</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:21.3pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>4.4 <a href="#c4_4">VelocityClassBasedFileMaker
vs. VelocityModelBasedLineInserter</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c5">Example case: The
MOGLiCC JavaBean Group</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c6">How is MOGLiCC
designed?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c7">How is MOGLiCC
implemented?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><a name="_Ref357515210"><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]></a><a
href="#c8"><span style='mso-bookmark:_Ref357515210'><span lang=EN-GB
style='mso-ansi-language:EN-GB'>What is the generation result of the MOGLi Code
Creator?</span></span><span style='mso-bookmark:_Ref357515210'></span></a><span
lang=EN-GB style='mso-ansi-language:EN-GB'><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c9">What are the benefits
of autogenerating source code?</a><o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-36.0pt;mso-list:l2 level1 lfo2;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><a href="#c10">Road Map</a><o:p></o:p></span></p>

<p class=MsoNormal align=right style='text-align:right'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c1><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>1. Why is MOGLiCC lightweight?<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c1'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are several
aspects that illustrate the lightweight character of the MOGLi Code Creator: <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
programm size which is only a few megabytes, <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
small number of prerequisites to run it - which is one: a Java 1.6 Runtime, <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
tooling needed to work with it - which is a simple text editor, <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>d)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
ease of use by simply integrating it into your IDE (Eclipse: RunAs…), and<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:36.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo4;
tab-stops:list 36.0pt'><![if !supportLists]><span lang=EN-GB style='mso-ansi-language:
EN-GB'><span style='mso-list:Ignore'>e)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
main reason:<span style='mso-spacerun:yes'>  </span>the small knowledge you
need to learn to work with it.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>With the
simplest application form (See 4. <span class=GramE>How to apply MOGLiCC?)</span>
<span class=GramE>you</span> only need to define your classes by a very simple
DSL and you are able to create all java classes for the MOGLiCC JavaBean Group
(See 5. <span class=GramE>Example Case).</span><o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c2><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>2. Why is MOGLiCC open?</span></b></a><b><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Firstly,
because it is open for extension by plugins. <span class=GramE>Secondly,
because it is open source.</span> Therefore, feel free to have a look at the
moglicc sources at GitHub. The MOGLiCC tool contains a small plugin framework
that allows loosely coupled plugins to interact with each other (for more
information about the software design see 6. How is MOGLiCC designed?). If the
standard set of functionality does not match you purpose, create your own
plugins that do. For example, it may be nice to model your domain objects using
a graphical tool. To use this graphical model with MOGLiCC, export the object
definitions as, e.g. XHaving written an XMI-Model-Provider plugin you would be
able to connect the graphical model tool with MOGLiCC and use it without
manually defining a model.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c3><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>3. How does MOGLiCC work?</span></b></a><b><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Think of
MOGLiCC as a reactor for two separate source code ingredients: a model and a
generator. The MOGLiCC plugin called StandardModelProvider allows you to define
a model in a simple text file. Another MOGLiCC plugin called VelocityClassBasedFileMaker
allows you to define a template file. Now MOGLiCC works like this: model +
template = code. Therefore, MOGLi is based on two equally important parts:
model and generator.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>For the
actual merging of model and template the current plugins of MOGLiCC use the
Velocity Framework. However, you will see no Velocity source code. The Velocity
engine is created, configured and started by MOGLiCC. You just need to feed the
engine with data, i.e. templates. This means, you have to learn the simple but
powerful Velocity Template Language (VTL) if you wish to create your own source
code artefacts. If you don’t like Velocity and its template DSL, write your own
generator plugin – remember: MOGLi is open for extension.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
three application forms of MOGLiCC that are worth destinguishing:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Define your own model</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>: use the default templates of the MOGLiCC JavaBean Group. To do so, you
only need to specify your model (class definitions).<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Build your own artefacts</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>: create your own templates to create completely new artefacts.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l0 level1 lfo6;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>c)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><b
style='mso-bidi-font-weight:normal'><span lang=EN-GB style='mso-ansi-language:
EN-GB'>Develop your own plugin</span></b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>: write your own MOGLiCC plugins, plug them into the MOGLi Code Creator
and let them do their jobs.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
three abstraction levels on which “parallel functionality” can arise and where
code generation can help (see 8. What are the benefits of autogenerating source
code?):<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>a) <b
style='mso-bidi-font-weight:normal'>Level of attributes</b>: data classes
consisting of many attributes may have to handle each variable in a similar way
many times, e.g. when building sql-scripts for the database, when creating dao
objects or when converting/mapping to other data structures. For all kinds of
modification all source code locations concerned can be modified automatically
by MOGLiCC.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>b) <b
style='mso-bidi-font-weight:normal'>Level of classes</b>: data model consisting
of many different data classes may have to generate for each data class a
number of other classes, e.g.<span style='mso-spacerun:yes'>  </span><span
class=GramE>java</span> bean class, DAO class, validator class, UnitTest
classes. For modification of data class all other classes concerned can be
modified automatically by MOGLiCC.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>c) <b
style='mso-bidi-font-weight:normal'>Level of projects</b>: in component
oriented architectures a new project has to be created frequently for each new
component. The project skeleton is usually similar between and can be generated
automatically by MOGLiCC.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><span
style='mso-spacerun:yes'> </span><span style='mso-tab-count:1'>           </span><o:p></o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c4><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4. How to apply MOGLiCC?</span></b></a><b><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The MOGLi
Code Creator is released as a zip-file. After unzipping its content, a lib
directory containing the MOGLiCC jar files and a start batch file is present.
Having set the environment variable JAVA_HOME pointing on a 1.6 JRE, the Code
Creator will do its job when calling the start batch. When called the first
time, some directories are created and a number of default files are extracted
from the jar source files. The most important directories are “input” and “output”.
For each plugin that needs input data, the input directory contains a
subdirectories named after the plugin the data belongs to. The same is true for
the output dir, but in addition old output files are deleted on every
application start. The input directory together with the corresponding output
directory can be organized in different workspaces. The
“application.properties” file allows you to move the default workspace
directory – the application root directory – to an arbitrary file system folder.
In this way, you can manage code generation for different projects. For more
information how to configure a workspace directory read the default application
properties file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>You may
wish to deactivate a certain generator plugin, because, for instance, you do
not wish its result being generated. For that purpose you can use the workspace
properties file. For more information about plugin deactivation read the
default workspace properties file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>For each
workspace, a log directory exists containing the log output of the last
application run. With every application start the old logfiles are deleted. The
main log file is named “_MOGLi.log” and contains log output of the core module
(See 6. How is MOGLiCC designed?). For any problem analysis, the end of this file
is the first place to look. Each plugin has its own log file with additional
plugin specific information.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_1"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.1 Defining a model <o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_1'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>A model is
defined by its model file. Model files are located in the plugin specific input
directories of the StandardModelProvider. If only one file is found there, it
is selected automatically. Otherwise, the model file must be defined in the
model properties file. It can be used to manage more than one model file in one
workspace. For more information about model file configuration read the default
model properties file. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The whole
idea of the metamodel of the StandardModelProvider <span class=GramE>is,</span>
that there are three information levels: model, class and attribute. The only
concrete data for each element in each level is only “name”, i.e. for the model
and each class in this model and each attribute in all of the classes you only
define a name. All other information is defined by MetaInfo elements. MetaInfos
can be defined for the model, a class or a single attribute. From the template
file, these MetaInfos are addressable. Hence, model file and template must
match very well to have reasonable output. The best way to understand this
model is to have a look at the default model file “MOGLiCC_JavaBeanModel.txt”.
It contains both a description of the model definition DSL and an example, the
MOGLiCC_JavaBeanModel, how the model DSL is used. If this file has been deleted
in your current workspace, define a new workspace in the application property
file. Having executed the application with the new workspace, the
“MOGLiCC_JavaBeanModel.txt” file will be available there again.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_2"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.2 Creating an artefact<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_2'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefacts
of a specific generator have to be defined in its specific form. It is common
for all generators, that artefact properties must be defined. For the
VelocityClassBasedFileMaker and the VelocityModelBasedLineInserter this is done
in the header of the main template file. For the VelocityModelBasedTreeBuilder
this is done in the artefact properties file. These properties define all
necessary artefact metadata such as the generation target directory.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<table class=Tabellengitternetz border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0cm 5.4pt 0cm 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>For more
  detailed information follow the links<o:p></o:p></span></p>
  </td>
  <td width=173 valign=top style='width:129.75pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
  defined in<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
  consists of<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
  properties defined in<o:p></o:p></span></p>
  </td>
  <td width=154 valign=top style='width:115.15pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Max
  Number of artefacts<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityModelBasedLineInserter/ArtefactProperties.htm">VelocityModelBasedLineInserter</a><o:p></o:p></span></p>
  </td>
  <td width=173 valign=top style='width:129.75pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>subdir of
  the plugin’s input folder<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Number of
  template files<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Header of
  one or more main templates<o:p></o:p></span></p>
  </td>
  <td width=154 valign=top style='width:115.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>No limit<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityClassBasedFileMaker/ArtefactProperties.htm">VelocityClassBasedFileMaker</a><o:p></o:p></span></p>
  </td>
  <td width=173 valign=top style='width:129.75pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>subdir of
  the plugin’s input folder<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Number of
  template files<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Header of
  the main template<o:p></o:p></span></p>
  </td>
  <td width=154 valign=top style='width:115.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>No limit<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;mso-yfti-lastrow:yes'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityModelBasedTreeBuilder/ArtefactProperties.htm">VelocityModelBasedTreeBuilder</a><o:p></o:p></span></p>
  </td>
  <td width=173 valign=top style='width:129.75pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>subdir of
  the plugin’s input folder<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
  properties file and a file structure<o:p></o:p></span></p>
  </td>
  <td width=180 valign=top style='width:135.0pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
  properties file<o:p></o:p></span></p>
  </td>
  <td width=154 valign=top style='width:115.15pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>No limit<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Each
artefact is named by the subdirectory containing its input data. For the
VelocityClassBasedFileMaker and the VelocityModelBasedLineInserter a main
template must be defined if more than one template file exist. A main template
has syllable “<st1:place w:st="on">Main</st1:place>” within its name. Other
templates may serve as subtemplates used by the main template or by another
subtemplate. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Within a
plugin’s input directory may exist subdirectories that do not represent
artefacts, e.g. meta information of your version control system or a collection
of subtemplates used for more than one artefact. For these subdirectories, you
can tell the generator to ignore these for code generation (See default
generator properties file).<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Artefact
properties start with the annotation symbol ‘@’. The header of template files
contains a list of such artefact properties, e.g. name of file to create or to
insert in and where to insert within the target file. The body of a template
file contains the actual generation content. Both header and body of the
template file are merged with model data. This means, place holder will be
replaced by model data both in the header and the body. However, the header
does not contribute to the generated content (body) and controls only what the
plugin does with the generated content.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
artefact attributes “FileName” and “TargetDir” determine the target file. If
the target file exists, the attribute ‘CreateNew’ controls whether the existing
file is overwritten or not. If the target file does not exist, the inserter
plugin will generate an error, the generator plugin will simply not create a
target file. In any case, however, both plugins write the generated content
into their plugin specific output dir. But after the next application start,
this output will be deleted.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
behaviour of Velocity Template Language (VTL) concerning white space is
quarrelsome, intensively discussed and strict: leading white space and empty
lines are simply removed. This is troublesome for formatting purpose. To
increase the easeness to create well formatted content, the MOGLiCC generators
apply a little parser after merging model and templates. This MOGLiCC specific
parser removes leading apostrophes &lt;’&gt; from each line of the generated
content. An apostrophe prevents Velocity from removing the whitespace that
follows it. With this parser it is possible to write both well formatted
templates and well formatted generation result. Use white space before an
apostrophe to format only a template line. Use white space after an apostrophe
to format both the template line and the corresponding line of the generation
result.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>When
writing template files or artefact properties files, you should have in mind
that not only the generator plugins contribute to the list of functions you can
use. See also <a href="StandardModelProvider/_MetaModel.htm">StandardModelProvider</a>
and <a href="VelocityEngineProvider/_TemplateUtilities.htm">VelocityEngineProvider</a>
for more information.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_3"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.3 The MetaInfo Validation Feature<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_3'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
advantage of the MOGLiCC Standard Model is its simpleness, its disadvantage the
large number of MetaInfo elements and the danger to lose the overview which
MetaInfo element is really being used. This is one reason for the MetaInfo
Validation Feature. A second reason is the importance specific MetaInfo
elements can have, for instance, without a MetaInfo element “JavaType” it would
not be possible to build a JavaBean artefact with a reasonable content. It
would be good to assure that for all classes in the model a java type is defined.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Therefore
the existing generator plugins implement the interface MetaInfoValidatorVendor
and its method “getMetaInfoValidatorList()”. MetaInfoValidators are defined in
the MetaInfo validation file called “MetaInfo.validation”. This file is located
in the plugin input directory of the generator plugin. For more information how
to define MetaInfoValidators, see the default MetaInfo validation file. The
StandardModelProvider collects all of these MetaInfoValidators and uses this
information for two purposes: 1. to throw an exception if a mandatory MetaInfo
element is missing and 2. to create a statistics file that informs which
MetaInfo element is used in which context and that warns if a MetaInfo element
or a MetaInfo Validator is unused. You find this statistics file in the plugin
output directory of the StandardModelProvider.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name="c4_4"><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>4.4 VelocityClassBasedFileMaker vs. VelocityModelBasedLineInserter<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c4_4'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
four differences between these two generators. First, only the inserter can
insert into existing files, whereas the generator can only create new files.
Second, the artefact property “TargetDir” is mandatory for the inserter but not
so for the generator. Third, “class based” means, that for each class defined
in the model an artefact output file, e.g. a JavaBean, is created. “Model
based” means that an insertion is made for the whole model in only one existing
file (or only one artefact output file is created). Fourth, for the generator
there must exist only one main template, for the inserter more than main
templates are possible, but they must reference the same target file, allowing
to insert into different sections within the same target file.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The concept
of class based and model based plugins may appear difficult. The template of an
artefact of a class based generator is merged with the whole model that results
into one output artefact. This is useful e.g. for generating a single
application wide configuration file that contains for each class in the model
some lines with configuration instructions (hibernate configuration for
instance). In short: Template + Model definition = one target file. Instead,
the template of an artefact of generator is not merged with the whole model but
with each class within the model. For 10 classes in the model this results in
10 output artefacts for the artefact’s template. This is useful e.g. for
generating java beans for a group of classes. In short: Template + Class
Definitions = many target files.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b><span lang=EN-GB style='mso-ansi-language:EN-GB'>5. <a
name=c5>Example case: The MOGLiCC JavaBean Group </a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
probably most typical example for code generation is to create simple data
classes, in Java, JavaBeans. Therefore, MOGLiCC comes with a set of default
templates for generating a number of artefacts that closely belong together:
The MOGLiCC JavaBean Group. This group of artefacts consists of a JavaBean
class, a builder class for easy creation of JavaBean instances with example
data, a validator class to check a JavaBean instance for valid data and two
JUnit test classes to demonstrate that the generated code is runnable and works
without errors. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Because
these JavaBean Group artefacts need to be created for each class within the
model, the templates are default input files of the VelocityClassBasedFileMaker
plugin. If you do not like defining your own model, you can use the default
model file “MOGLiCC_JavaBeanModel.txt” which describes a few arbitrary objects
just for illustration purpose. After starting the MOGLiCC application you find
the generated artefacts in “&lt;workspaceDir&gt;/output/
VelocityClassBasedFileMaker”. Create a test project and move the generated java
files into it. Then, you are able to execute the JUnit test cases.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The most
complex class is the JavaBean. It is by default created with the following methods:
toString, hashcode, equals and compare. If the Clonable interface is found in
the class definition, the clone method is additionally generated. If the
Serializable interface is found in the class definition, a SerialVersionUID is
generated. To assure maintainablity the JavaBean main template uses a large
number of subtemplates. Some of them even use further subtemplates. If you wish
to study the Velocity Template Language (VTL), the templates of the MOGLiCC
JavaBean Group provide a lot of snippets to learn from. Generally, you find the
VTL refererence guide here: <a
href="http://velocity.apache.org/engine/devel/vtl-reference-guide.html">http://velocity.apache.org/engine/devel/vtl-reference-guide.html</a>.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c6><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>6. How is MOGLiCC designed?<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c6'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The basic
principle in designing the MOGLi Code Creator was “Loosely coupling”. Following
the articles <a
href="http://de.slideshare.net/iksgmbh/raus-aus-der-dependency-hlle-ein-artikel-der-iks-im-javaspektrum">Raus
aus der Dependency Hölle</a> and <a
href="http://de.slideshare.net/iksgmbh/wohin-mit-den-utilities-ein-artikel-der-iks-im-javaspektrum?from_search=1">Dependency-Management
von technischen Standardkomponenten</a> the MOGLiCC architecture is
component-oriented and the application consists of a number of different
components. Some of them represent business logic components – in terms of the
articles: “fachliche Komponenten”.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The heart
of the application is the business logic component “core” which actually
represents a container for MOGLiCC plugins. With each application start, a
special plugin folder is scanned for jar-files that contain a file named
“mogli.properties”. From this file a fully qualified name of the plugin starter
class is read and used to instantiate the starter class via reflection. The
starter classes of all plugins are cast on the common MOGLiCC interface type
“MOGLiPlugin”. After loading the starter classes, the core component analyses
the dependencies defined by the “getDependencies” method each MOGLiPlugin
implements. If all dependencies are resolvable the plugins are sorted in the
execution order. In this way it is guaranteed that, for instance,<span
style='mso-spacerun:yes'>  </span>the model provider is always executed before
the generators.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The four
other business logic components are the four plugins StandardModelProvider,
VelocityEngineProvider, VelocityClassBasedFileMaker and
VelocityModelBasedLineInserter. Before executing these plugins, the core
prepares each plugin for execution and sets an infrastructure service object to
each plugin. This service provides infrastructure functionality to the plugins
such as “getPluginInputDir()” or “getModelProvider(id)”. Finally, the core
calls the MogliPlugin method “doYourJob()” for each plugin to execute it.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The core
component has two more responsibilities. First, it checks whether a help
directory exists for each plugin. If not, the core triggers the corresponding
plugin to extract its embedded help files. Second, the core checks whether an
input directory exists for each plugin. If not, the core triggers the
corresponding plugin to extract its embedded default input files. In this way,
a number of directories and files are created when the application was started
the first time.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There are
four basic MOGLiCC plugin types. 1. ModelProvider, 2. EngineProvider, 3.
Generator and 4. DataProvider.<span style='mso-spacerun:yes'>  </span>The
StandardModelProvider is of course a ModelProvider; VelocityEngineProvider an
EngineProvider; VelocityClassBasedFileMaker and VelocityModelBasedLineInserter
are Generators. “Inserter” is a subtype of a “Generator”. A DataProvider is
currently not yet implemented.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>An
EngineProvider typically represents a plugin without an own input and output
directory. It does nothing when called directly from the core. The
VelocityEngineProvider creates, configures and actually starts a velocity
engine automatically. Thus, the generator plugins using the
VelocityEngineProvider have nothing to do with any Velocity code. A generator
plugin uses an EngineProvider by setting a specific EngineData object to the
EngineProvider and triggers it to start the engine. The EngineData gives the
EngineProvider all information necessary for the generation, i.e. the model and
the template(s). Having done its job the EngineProvider returns a specific
ResultData object to the generator which contains all information for the
generator to create the output files.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c7><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>7. How is MOGLiCC implemented?<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c7'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The author
of the moglicc source code followed the principles of the clean code developer
(<a href="http://www.clean-code-developer.de/">http://www.clean-code-developer.de</a>).
One rule of the clean code developers is “Test first”. To apply this rule, the
source code author also followed the Test Driven Development method of “Growing
Object-Oriented Software, Guided by Tests” by Freeman &amp; Pryce. Thus, the
MOGLiCC functionality of the current version is automatically and regularly
tested by 384 unit tests (70-90% coverage), 49 integration tests (10-40%
coverage) and 40 system tests. <o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c8><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>8. What is the generation result of the MOGLi Code Creator?<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c8'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Each
generator has its own type of result:<o:p></o:p></span></p>

<table class=Tabellengitternetz border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;
 mso-yfti-tbllook:480;mso-padding-alt:0cm 5.4pt 0cm 5.4pt'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityModelBasedLineInserter/ArtefactProperties.htm">VelocityModelBasedLineInserter</a><o:p></o:p></span></p>
  </td>
  <td width=293 valign=top style='width:219.75pt;border:solid windowtext 1.0pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;mso-border-alt:
  solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>one or
  more lines within an existing file or a single new file<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityClassBasedFileMaker/ArtefactProperties.htm">VelocityClassBasedFileMaker</a><o:p></o:p></span></p>
  </td>
  <td width=293 valign=top style='width:219.75pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>one or
  more complete new files<o:p></o:p></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;mso-yfti-lastrow:yes'>
  <td width=259 valign=top style='width:194.1pt;border:solid windowtext 1.0pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;mso-border-alt:solid windowtext .5pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><a
  href="VelocityModelBasedTreeBuilder/ArtefactProperties.htm">VelocityModelBasedTreeBuilder</a><o:p></o:p></span></p>
  </td>
  <td width=293 valign=top style='width:219.75pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  mso-border-alt:solid windowtext .5pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>a directory
  of subdirectories and files<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>Common for
all generators is, that the generator’s result is written twice. First, in the
output directory of the application root directory. This is the central
location for all generation results created by a single application run. For
each application start this output directory is cleaned, thus, it contains only
newly generated results. Second, in the target directory defined in the
artefact properties. There are two benefits in this procedure: 1. For many
different artefacts, the second generation results may be highly distributed in
your file system. For a quick (over-)view, the application’s output directory
is very convenient. 2. The second generation result creates the code at the
very location where you actually want to have it, where you work with it (e.g.
your IDE workspace). However, you may not allow the MOGLiCC to overwrite
already existing code in your workspace (by using the artefact property
CreateNew=false). Anyway, you find the generation result in the application’s
output directory. In this way, you are able to compare the preserved code in
your workspace with the new one.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c9><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>9. What are the benefits of autogenerating source code?</span></b></a><b><span
lang=EN-GB style='mso-ansi-language:EN-GB'><o:p></o:p></span></b></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>There is
only one final purpose of code autogeneration: speeding up software
development. To gain this final benefit, two aspects are important to have in
mind:<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>a)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>The benefit increases with the
amount of “parallel functionality” (see abstraction levels in 3. How does
MOGLiCC work?). If a specific design concept is used again and again, parallel
functionality exists, for instance, a number of modules or components with a
similar internal structure to be embedded in a similar environment. The higher
the number of components (repetitions of the parallel functionality) and the
higher the complexity of the parallel functionality, the higher is the benefit
of autogeneration. Is this complexity low (let’s say, only a few lines in one
file are needed to be generated) the number of repetitions must be very high to
benefit from autogeneration. Is the complexity high (many lines in many
different files) the benefit starts at least with the third “parallel
component” (the second repetition). If you foresee sufficient complexity and
repetitions of parallel functionality, start using autogenerating with the
first repetition.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l1 level1 lfo8;
tab-stops:list 18.0pt 36.0pt'><![if !supportLists]><span lang=EN-GB
style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>b)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>There are three proximate benefits
that contribute to the final one: <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>I)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-GB style='mso-ansi-language:EN-GB'>Reduction
of non-creative coding effort. <o:p></o:p></span></p>

<p class=MsoBodyTextIndent style='margin-left:42.55pt;text-indent:-21.25pt;
tab-stops:42.55pt'><span lang=EN-GB><span style='mso-tab-count:1'>       </span>Given
some minutes to write, extend or modify a model, you generate the code within
seconds. In contrast, the manual typing of the code may cost hours of
development time even if the programmer(s) exactly know where to create which
code.</span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>II)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Reduction of costs for fixing stupid
bugs. <o:p></o:p></span></p>

<p class=MsoBodyTextIndent style='margin-left:42.55pt;text-indent:-21.25pt;
tab-stops:42.55pt'><span lang=EN-GB><span style='mso-tab-count:1'>       </span>Typically,
there are three types of stupid errors caused by programming parallel
functionality manually. 1. copy-paste-errors, 2. misspelled expressions and 3.
forgotten source locations where an adaptation is necessary. Cost of bug fixing
can increase the coding effort dramatically and fixing stupid errors decreases
the motivation of the most developers. In contrast, learning to control an
autogeneration tool is fun for many developers.</span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;mso-list:
l1 level2 lfo8;tab-stops:42.55pt list 90.0pt'><![if !supportLists]><span
lang=EN-GB style='mso-ansi-language:EN-GB'><span style='mso-list:Ignore'>III)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-GB style='mso-ansi-language:EN-GB'>Documentation of “How to” knowledge<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:42.55pt;text-indent:-21.25pt;tab-stops:
42.55pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'><span
style='mso-tab-count:1'>       </span>Have you ever heard a statement like
“Source code is the best documentation”. This may be true for clean code in its
best appearance. However, source code is frequently the only documentation. Now
imagine a team of developers which has designed and implemented a complex
system. The team members change and after a while the knowledge how to set up a
new module in the system dies away. Familiar situation? Given the system is
developed by the MOGLi Code Creator, the developer simply study the templates
for the artefacts generated by the VelocityClassBasedFileMaker and the
insertions done by the VelocityModelBasedLineInserter and the knowledge where
to create which code is quickly available. <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:35.4pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><a href="#c0">Top</a><o:p></o:p></span></b></p>

<p class=MsoNormal style='margin-left:35.4pt'><span lang=EN-GB
style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal><a name=c10><b><span lang=EN-GB style='mso-ansi-language:
EN-GB'>10. Road Map<o:p></o:p></span></b></a></p>

<span style='mso-bookmark:c10'></span>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'>The
following extensions are planned:<o:p></o:p></span></p>

<p class=MsoNormal style='tab-stops:14.2pt'><span lang=EN-GB style='mso-ansi-language:
EN-GB'><o:p>&nbsp;</o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>a)<span
style='mso-tab-count:1'>  </span>A new MOGLiPlugin that reads sample data from
input files and creates a java class ‘SampleDataStorage.java’. This class will
allow accessing the sample data programmatically and will belong to the MOGLiCC
JavaBean Group.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>b)<span
style='mso-tab-count:1'>  </span>A new artefact for the VelocityClassBasedFileMaker
called ‘JavaBeanFactory.java’. This Factory will use SampleDataStorage to
create instances of the generated Java Bean bases on the sample data and will
also belong to the MOGLiCC JavaBean Group.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>c) A new own
MOGLiPlugin for the responsibility “Validation of MetaInfo elements” which is
currently partly done by the model provider and partly by the generator
plugins.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>d) A new property
“MetaInfoValidationMode” with the states: OFF, NICE, STRICT <o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span lang=EN-GB style='mso-ansi-language:EN-GB'>e) A new report file
for provider plugins into a new application root subfolder “report”. This will
also be the future location of the generator report.<o:p></o:p></span></p>

<p class=MsoNormal style='margin-left:14.2pt;text-indent:-14.2pt;tab-stops:
14.2pt'><span class=GramE><span lang=EN-GB style='mso-ansi-language:EN-GB'>f) A</span></span><span
lang=EN-GB style='mso-ansi-language:EN-GB'> “attention.error” file generated
into the application root folder in case at least one plugin has not been
executed successfully.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=EN-GB style='mso-ansi-language:EN-GB'><o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
