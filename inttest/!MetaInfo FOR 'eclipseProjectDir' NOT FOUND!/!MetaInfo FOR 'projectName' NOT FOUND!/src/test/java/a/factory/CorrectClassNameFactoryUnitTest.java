package a.factory;

import static org.junit.Assert.*;

import java.util.*;

import org.junit.*;

import a.*;
import a.factory.*;
import a.utils.*;
import a.validator.*;

/**
* Tests basic JavaBean functionality for 'CorrectClassNameFactory.java'
*
* @author generated by MOGLiCC
*/
public class CorrectClassNameFactoryUnitTest
{
	@Test
	public void returnsFirst() {
		final List<CorrectClassName> result = CorrectClassNameFactory.createFirstFromDataPool(1);
		assertNotNull("Not null expected for ", result);
		assertEquals("result", 1, result.size());
	}

	@Test
	public void returnsAll() {
		final List<CorrectClassName> result = CorrectClassNameFactory.createAllFromDataPool();
		assertNotNull("Not null expected for ", result);
		assertEquals("result", CorrectClassNameFactory.getNumberOfTestObjectsInDataPool(), result.size());

		final CorrectClassName lastCorrectClassName = result.get(result.size() - 1);
	}

	@Test
	public void removesAllDataFromOptionalFields() {
		// arrange
		final CorrectClassName instance1 = CorrectClassNameFactory.createInstanceWithAllFieldsAtMaxLength();
		final CorrectClassName instance2 = CorrectClassNameFactory.createInstanceWithAllFieldsAtMaxLength();

		// act
		final CorrectClassName instance3 = CorrectClassNameFactory.createInstanceOnlyWithMandatoryFields();  // indirect test
		CorrectClassNameFactory.removeAllDataFromOptionalFields(instance1); // direct test

		// assert
		CorrectClassNameValidator.doYourJob(instance1); // throws ValidationException in error case
		CorrectClassNameValidator.doYourJob(instance3); // throws ValidationException in error case
	}

	@Test
	public void returnsInstanceWithAllFieldsAtMaxLength() {
		final CorrectClassName instance = CorrectClassNameFactory.createInstanceWithAllFieldsAtMaxLength();
		assertNotNull("Not null expected for ", instance);
	}

	@Test
	public void returnsInstanceWithAllFieldsAtMinLength() {
		final CorrectClassName instance = CorrectClassNameFactory.createInstanceWithAllFieldsAtMinLength();
		assertNotNull("Not null expected for ", instance);
	}

	@Test
	public void thowsExceptionForTooMany() {
		try {
			CorrectClassNameFactory.createFirstFromDataPool(999999999);
			fail("Expected exception was not thrown!");
		} catch (Exception e) {
			assertEquals("Error message", "Error: Cannot provide 999999999 CorrectClassName objects. " +
					                      "Pool contains only " + CorrectClassNameFactory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
		}
	}

	@Test
	public void returnsByIndex() {
		final CorrectClassName result = CorrectClassNameFactory.getByIndex(0);
		assertNotNull("Not null expected for ", result);
	}

	@Test
	public void thowsExceptionForIndexOutOfRange() {
		try {
			CorrectClassNameFactory.getByIndex(1000000000);
			fail("Expected exception was not thrown!");
		} catch (Exception e) {
			assertEquals("Error message", "Error: Cannot provide the 1000000000th CorrectClassName object. " +
					                      "Pool contains only " + CorrectClassNameFactory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
		}
	}

	@Test
	public void returnsRandom() {
		final CorrectClassName result = CorrectClassNameFactory.createRandomFromDataPool();
		assertNotNull("Not null expected for ", result);
	}

	@Test
	public void returnsInstanceWithAllSupportedFieldsExceedingMaxLength()
	{
		final CorrectClassName toReturn = CorrectClassNameFactory.createInstanceWithAllSupportedFieldsExceedingMaxLength();


}

	@Test
	public void returnsInstanceWithAllSupportedFieldsNotReachingMinLength()
	{
		final CorrectClassName toReturn = CorrectClassNameFactory.createInstanceWithAllSupportedFieldsNotReachingMinLength();

	}
}