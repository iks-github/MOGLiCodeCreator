package de.factory;

import static org.junit.Assert.*;

import java.util.*;

import org.junit.*;

import de.*;
import de.factory.*;
import de.utils.*;
import de.validator.*;

/**
* Tests basic JavaBean functionality for 'TestFactory.java'
*
* @author generated by MOGLiCC
*/
public class TestFactoryUnitTest
{
	@Test
	public void returnsFirst() {
		final List<Test> result = TestFactory.createFirstFromDataPool(1);
		assertNotNull("Not null expected for ", result);
		assertEquals("result", 1, result.size());
	}

	@Test
	public void returnsAll() {
		final List<Test> result = TestFactory.createAllFromDataPool();
		assertNotNull("Not null expected for ", result);
		assertEquals("result", TestFactory.getNumberOfTestObjectsInDataPool(), result.size());

		final Test lastTest = result.get(result.size() - 1);
	}

	@Test
	public void removesAllDataFromOptionalFields() {
		// arrange
		final Test instance1 = TestFactory.createInstanceWithAllFieldsAtMaxLength();
		final Test instance2 = TestFactory.createInstanceWithAllFieldsAtMaxLength();

		// act
		final Test instance3 = TestFactory.createInstanceOnlyWithMandatoryFields();  // indirect test
		TestFactory.removeAllDataFromOptionalFields(instance1); // direct test

		// assert
		TestValidator.doYourJob(instance1); // throws ValidationException in error case
		TestValidator.doYourJob(instance3); // throws ValidationException in error case
	}

	@Test
	public void returnsInstanceWithAllFieldsAtMaxLength() {
		final Test instance = TestFactory.createInstanceWithAllFieldsAtMaxLength();
		assertNotNull("Not null expected for ", instance);
	}

	@Test
	public void returnsInstanceWithAllFieldsAtMinLength() {
		final Test instance = TestFactory.createInstanceWithAllFieldsAtMinLength();
		assertNotNull("Not null expected for ", instance);
	}

	@Test
	public void thowsExceptionForTooMany() {
		try {
			TestFactory.createFirstFromDataPool(999999999);
			fail("Expected exception was not thrown!");
		} catch (Exception e) {
			assertEquals("Error message", "Error: Cannot provide 999999999 Test objects. " +
					                      "Pool contains only " + TestFactory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
		}
	}

	@Test
	public void returnsByIndex() {
		final Test result = TestFactory.getByIndex(0);
		assertNotNull("Not null expected for ", result);
	}

	@Test
	public void thowsExceptionForIndexOutOfRange() {
		try {
			TestFactory.getByIndex(1000000000);
			fail("Expected exception was not thrown!");
		} catch (Exception e) {
			assertEquals("Error message", "Error: Cannot provide the 1000000000th Test object. " +
					                      "Pool contains only " + TestFactory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
		}
	}

	@Test
	public void returnsRandom() {
		final Test result = TestFactory.createRandomFromDataPool();
		assertNotNull("Not null expected for ", result);
	}

	@Test
	public void returnsInstanceWithAllSupportedFieldsExceedingMaxLength()
	{
		final Test toReturn = TestFactory.createInstanceWithAllSupportedFieldsExceedingMaxLength();


}

	@Test
	public void returnsInstanceWithAllSupportedFieldsNotReachingMinLength()
	{
		final Test toReturn = TestFactory.createInstanceWithAllSupportedFieldsNotReachingMinLength();

	}
}