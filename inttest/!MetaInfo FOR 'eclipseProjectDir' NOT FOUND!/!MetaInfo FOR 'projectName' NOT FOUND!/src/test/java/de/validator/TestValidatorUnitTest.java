package de.validator;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import de.*;
import de.builder.*;
import de.validator.*;
import de.factory.*;
import de.utils.*;


/**
* Tests basic validator functionality for 'TestValidator.java'
*
* @author generated by MOGLiCC
*/
public class TestValidatorUnitTest {

	private Test testData;

	@Before
	public void setup() {
		final TestBuilder builder = new TestBuilder();
		testData = builder
		          .build();
	}

	@Test
	public void validatesWithoutErrorIfAllFieldsAreSetCorrectly() {
		try {
			TestValidator.doYourJob(testData);
		} catch (Exception e) {
			System.err.println(e.getMessage());
			fail("No exception expected !");
		}
	}




	@Test
	public void validatesWithMultipleValidationErrors() {

		try {
			TestValidator.doYourJob(testData);
			fail("Expected exception not thrown!");
		} catch (Exception e) {
			System.err.println(e.getMessage());
			assertTrue("unexpected error message", e.getMessage().startsWith("0 validation errors exist for 'Test'"));
			return;
		}
// there is no validation definfed for Test
	}

	@Test
	public void validatesWithMultipleErrorMessageForNotReachingMinLength() {
		final Test instance = TestFactory.createInstanceWithAllSupportedFieldsNotReachingMinLength();

// the meta model contains for class 'Test' no attribute with metainfo 'MinLength', therefore is no test in this method possible

	}

	@Test
	public void validatesWithMultipleErrorMessageForExceedingMaxLength() {
		final Test instance = TestFactory.createInstanceWithAllSupportedFieldsExceedingMaxLength();

// the meta model contains for class 'Test' no attribute with metainfo 'MaxLength', therefore is no test in this method possible

	}


}