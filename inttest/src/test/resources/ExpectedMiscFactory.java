package com.iksgmbh.moglicc.demo.factory;

import java.lang.Boolean;
import java.lang.Byte;
import java.lang.Character;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import org.joda.time.DateTime;
import com.iksgmbh.moglicc.demo.utils.MOGLiCCJavaBean;
import java.util.*;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;

import com.iksgmbh.moglicc.demo._Misc;
import com.iksgmbh.moglicc.demo.builder._MiscBuilder;
import com.iksgmbh.moglicc.demo.factory._MiscFactory;
import com.iksgmbh.moglicc.demo.utils.*;

import org.apache.commons.lang.StringUtils;

/**
* Factory class of the MOGLiCC JavaBean Group.
* Creates _Misc instances with data for test purpose.
*
* @author generated by MOGLiCC
*/
public class _MiscFactory
{
	private final static DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("dd.MM.yyyy HH:mm:ss:SSS");

	public static final int DEFAULT_MAX_LENGTH_STRING_VALUE = 1000;
	public static final int DEFAULT_MAX_LENGTH_NUMBER_VALUE = 8;
	public static final int DEFAULT_MIN_LENGTH_STRING_VALUE = 0;
	public static final int DEFAULT_MIN_LENGTH_NUMBER_VALUE = 1;
	public static final int NO_VALUE_AVAILABLE_IN_MODEL = -1;

	private static final String REGISTRY_ID_MAX_FIELD_CONTENT = "_MiscInstanceWithMaxFieldContent";
	private static final String REGISTRY_ID_MIN_FIELD_CONTENT = "_MiscInstanceWithMinFieldContent";

	static final HashMap<String, List<String>> dataPool = new HashMap<String, List<String>>();
	static final HashMap<String, Integer> maxLengths = new HashMap<String, Integer>();
	static final HashMap<String, Integer> minLengths = new HashMap<String, Integer>();

	private static final String OBJECT_ID = "objectID";
	private static final Random randomizer = new Random(new Date().getTime());

  /**
   * Returns value used by the MaxLengthValidator.
   * @param fieldname name of a field of the _Misc class.
   * @return value of the maximum field length allowed in the named field
   */
	public static Integer getMaxLength(final String fieldname)
	{
		final Integer toReturn = maxLengths.get(fieldname);
		if (toReturn == null)
		{
			return NO_VALUE_AVAILABLE_IN_MODEL;
		}
		return maxLengths.get(fieldname);
	}

  /**
   * Returns value used by the MinLengthValidator.
   * @param fieldname name of a field of the _Misc class.
   * @return value of the minimum field length allowed in the named field
   */
	public static Integer getMinLength(final String fieldname)
	{
		final Integer toReturn = minLengths.get(fieldname);
		if (toReturn == null)
		{
			return NO_VALUE_AVAILABLE_IN_MODEL;
		}
		return minLengths.get(fieldname);
	}

	/**
	 * @return the instance with all fields with maximum allowed number of chars
	 */
	public static _Misc createInstanceWithAllFieldsAtMaxLength()
	{
		final _Misc toReturn = createInstanceWithExampleData();

		toReturn.setText( MOGLiFactoryUtils.createStringValue("i", getMaxLength("Text").intValue() ) );
		toReturn.setNumberByte( MOGLiFactoryUtils.createByteValue( getMaxLength("NumberByte").intValue() ) );
		toReturn.setNumberInt( MOGLiFactoryUtils.createIntValue( getMaxLength("NumberInt").intValue() ) );
		toReturn.setNumberLong( MOGLiFactoryUtils.createLongValue( getMaxLength("NumberLong").intValue() ) );
		toReturn.setNumberFloat( Float.MAX_VALUE );
		toReturn.setNumberDouble( Double.MAX_VALUE );
		toReturn.setBooleanWrapper( Boolean.TRUE );
		toReturn.setCharWrapper( Character.MAX_VALUE );
		toReturn.setByteWrapper( MOGLiFactoryUtils.createByteValue( getMaxLength("ByteWrapper").intValue() ) );
		toReturn.setIntWrapper( MOGLiFactoryUtils.createIntValue( getMaxLength("IntWrapper").intValue() ) );
		toReturn.setLongWrapper( MOGLiFactoryUtils.createLongValue( getMaxLength("LongWrapper").intValue() ) );
		toReturn.setFloatWrapper( Float.MAX_VALUE );
		toReturn.setDoubleWrapper( Double.MAX_VALUE );
		toReturn.setBigDecimal( new BigDecimal( "" + MOGLiFactoryUtils.createLongValue( getMaxLength("BigDecimal").intValue() ) ) );

		return toReturn;
	}

	/**
	 * @return the instance with all fields with the minimum allowed number of chars
	 */
	public static _Misc createInstanceWithAllFieldsAtMinLength()
	{
		final _Misc toReturn = new _Misc();

		toReturn.setText( MOGLiFactoryUtils.createStringValue("i", getMinLength("Text").intValue() ) );
		toReturn.setNumberByte( MOGLiFactoryUtils.createByteValue( getMinLength("NumberByte").intValue() ) );
		toReturn.setNumberInt( MOGLiFactoryUtils.createIntValue( getMinLength("NumberInt").intValue() ) );
		toReturn.setNumberLong( MOGLiFactoryUtils.createLongValue( getMinLength("NumberLong").intValue() ) );
		toReturn.setNumberFloat( Float.valueOf("0") );
		toReturn.setNumberDouble( Double.valueOf("0") );
		toReturn.setBooleanWrapper( Boolean.FALSE );
		toReturn.setCharWrapper( Character.MIN_VALUE );
		toReturn.setByteWrapper( MOGLiFactoryUtils.createByteValue( getMinLength("ByteWrapper").intValue() ) );
		toReturn.setIntWrapper( MOGLiFactoryUtils.createIntValue( getMinLength("IntWrapper").intValue() ) );
		toReturn.setLongWrapper( MOGLiFactoryUtils.createLongValue( getMinLength("LongWrapper").intValue() ) );
		toReturn.setFloatWrapper( Float.valueOf("0") );
		toReturn.setDoubleWrapper( Double.valueOf("0") );
		toReturn.setBigDecimal( new BigDecimal( "" + MOGLiFactoryUtils.createLongValue(getMinLength("BigDecimal").intValue() ) ) );
		List<Long> listLong = new ArrayList<Long>();
		toReturn.setListOfLongs( listLong );
		List<String> listString = new ArrayList<String>();
		toReturn.setStringList( listString );
		String[] strArr = new String[0];
		toReturn.setStringArray( strArr );
		// Unkown CollectionType: $collectionType

		return toReturn;
	}

	/**
	 * deletes all data except in mandatory fields
	 */
	public static void removeAllDataFromOptionalFields(final _Misc instance)
	{
		instance.setText(null);
		instance.setReady(false);
		instance.setPrimitivChar( '\u0000' );
		instance.setNumberByte( (byte) 0 );
		instance.setBooleanWrapper(null);
		instance.setCharWrapper(null);
		instance.setByteWrapper(null);
		instance.setIntWrapper(null);
		instance.setLongWrapper(null);
		instance.setFloatWrapper(null);
		instance.setDoubleWrapper(null);
		instance.setBigDecimal(null);
		instance.setDateTime(null);
		instance.setListOfLongs(null);
		instance.setStringList(null);
		instance.setStringArray(null);
		instance.setHashSet(null);
	}

   /**
    * Removes from an instance created by the first address of the data pool all content of optional fields.
    * @return _Misc object
    */
	public static _Misc createInstanceOnlyWithMandatoryFields()
	{
		final _Misc toReturn = createInstanceWithExampleData();
		removeAllDataFromOptionalFields(toReturn);
		return toReturn;
	}

   /**
    * Creates all instances available in the data pool of this factory class.
    * @return List of _Misc objects.
    */
	public static List<_Misc> createAllFromDataPool()
	{
		final Object[] fields = dataPool.keySet().toArray();
		final int poolSize = dataPool.get(fields[0]).size();
		return createFirstFromDataPool( poolSize);
	}

	/**
	 * @param num number of _Misc objects to provide
	 * @return the first <num> objects in the pool
	 */
	public static List<_Misc> createFirstFromDataPool(final int num)
	{
		final int dataPoolNum = getNumberOfTestObjectsInDataPool();
		if (num > dataPoolNum)
		{
			throw new RuntimeException("Error: Cannot provide " + num + " _Misc objects. Pool contains only "
                                      + dataPoolNum + " objects.");
		}

		final List<_Misc> toReturn = new ArrayList<_Misc>();
		for (int i = 0; i < num; i++) {
			toReturn.add(buildObject(i));
		}

		return toReturn;
	}

	/**
	 * @param num index of _Misc object to provide
	 * @return the (<index>+1)th object in the pool
	 */
	public static _Misc createByIndex(final int index)
	{
		final int dataPoolNum = getNumberOfTestObjectsInDataPool();
		if (dataPoolNum == 0)
		{
			throw new RuntimeException("Cannot create any instance: Data pool is empty.");
		}

		if (index > dataPoolNum)
		{
			throw new RuntimeException("Error: Cannot provide the " + index + "th _Misc object. Pool contains only "
                                     + dataPoolNum + " objects.");
		}

		final String objectId = getObjectIdFromIndex(index);
		if (MOGLiCCJavaBeanRegistry.isBeanRegistered(objectId))
		{
			return (_Misc) MOGLiCCJavaBeanRegistry.getJavaBean(objectId);
		}

		return buildObject(index);
	}

	/**
	 * @param id of wanted Person object
	 * @return Person object identified by its object id
	 */
	public static _Misc createById(final String objectId)
	{
		final int index = getIndexFromId(objectId);

		if (index == -1)
		{
			return null;
		}

		return createByIndex(index);
	}

	/**
	 * @return a randomly chosen object from the pool
	 */
	public static _Misc createRandomFromDataPool()
	{
		final int limit = getNumberOfTestObjectsInDataPool();

		if (limit <= 0)
		{
			return null;  // no data available
		}

		final int index = randomizer.nextInt( limit );
		return buildObject(index);
	}

	/**
	 * Cuts the content of the named field by the numberCharToCut value if the content is not null.
	 */
	public static void cutFromFieldContent(final _Misc instance, final String fieldname, final int numberCharToCut)
	{
		if ( "Text".equals(fieldname) )
		{
			final String value = instance.getText();

			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setText("");
				}
				else
				{
					instance.setText(value.substring(0, length));
				}
			}

			return;
		}

		if ( "NumberByte".equals(fieldname) )
		{
			final String value = "" + instance.getNumberByte();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setNumberByte( (byte) 0 );
				}
				else
				{
					instance.setNumberByte( new Byte( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "NumberInt".equals(fieldname) )
		{
			final String value = "" + instance.getNumberInt();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setNumberInt( 0 );
				}
				else
				{
					instance.setNumberInt( new Integer( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "NumberLong".equals(fieldname) )
		{
			final String value = "" + instance.getNumberLong();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setNumberLong( 0L );
				}
				else
				{
					instance.setNumberLong( new Long( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "ByteWrapper".equals(fieldname) )
		{
			final String value = "" + instance.getByteWrapper();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setByteWrapper( (byte) 0 );
				}
				else
				{
					instance.setByteWrapper( new Byte( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "IntWrapper".equals(fieldname) )
		{
			final String value = "" + instance.getIntWrapper();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setIntWrapper( 0 );
				}
				else
				{
					instance.setIntWrapper( new Integer( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "LongWrapper".equals(fieldname) )
		{
			final String value = "" + instance.getLongWrapper();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setLongWrapper( 0L );
				}
				else
				{
					instance.setLongWrapper( new Long( value.substring(0, length) ) );
				}
			}

			return;
		}

		if ( "BigDecimal".equals(fieldname) )
		{
			final String value = "" + instance.getBigDecimal().toPlainString();
			if (value != null)
			{
				final int length = value.length() - numberCharToCut;

				if (length < 1)
				{
					instance.setBigDecimal( new BigDecimal ( "0" ) );
				}
				else
				{
					instance.setBigDecimal( new BigDecimal( value.substring(numberCharToCut) ) );
				}
			}

			return;
		}

		System.err.println("Field <" + fieldname + "> is either unkown to the class '_Misc' or cutting its field content is not supported.");
	}

	/**
	 * Appends the content of the named field by the textToAdd value if the content is not null.
    * This value must represent a number for numerical fields.
	 */
	public static void addToFieldContent(final _Misc instance, final String fieldname, final String textToAdd)
	{
		if ( "Text".equals(fieldname) )
		{
			final String value = instance.getText();

			if (value != null)
			{
				instance.setText(value + textToAdd);
			}

			return;
		}

		if ( "NumberByte".equals(fieldname) )
		{
			final String value = "" + instance.getNumberByte() + textToAdd;
			instance.setNumberByte( new Byte( value ).byteValue() );
			return;
		}

		if ( "NumberInt".equals(fieldname) )
		{
			final String value = "" + instance.getNumberInt() + textToAdd;
			instance.setNumberInt( new Integer( value ).intValue() );
			return;
		}

		if ( "NumberLong".equals(fieldname) )
		{
			final String value = "" + instance.getNumberLong() + textToAdd;
			instance.setNumberLong( new Long( value ).longValue() );
			return;
		}

		if ( "ByteWrapper".equals(fieldname) )
		{
			if (instance.getByteWrapper() != null)
			{
				final String value = "" + instance.getByteWrapper() + textToAdd;
				instance.setByteWrapper( new Byte( value ) );
			}

			return;
		}

		if ( "IntWrapper".equals(fieldname) )
		{
			if (instance.getIntWrapper() != null)
			{
				final String value = "" + instance.getIntWrapper() + textToAdd;
				instance.setIntWrapper( new Integer( value ) );
			}

			return;
		}

		if ( "LongWrapper".equals(fieldname) )
		{
			if (instance.getLongWrapper() != null)
			{
				final String value = "" + instance.getLongWrapper() + textToAdd;
				instance.setLongWrapper( new Long( value ) );
			}

			return;
		}

		if ( "BigDecimal".equals(fieldname) )
		{
			if (instance.getBigDecimal() != null)
			{
				final String value = textToAdd + instance.getBigDecimal().toPlainString() + textToAdd;
				instance.setBigDecimal( new BigDecimal( value ) );
			}

			return;
		}

		System.err.println("Field <" + fieldname + "> is either unkown to the class '_Misc' or appending its field content is not supported.");
	}

   // *************************************************************************
   // ***************************  private methods  ***************************
   // *************************************************************************

	private static String getObjectIdFromIndex(int index)
	{
		return dataPool.get( OBJECT_ID ).get(index);
	}

	private static int getIndexFromId(final String objectId)
	{
		final List<String> ids = dataPool.get( OBJECT_ID );
		if (ids.size() == 0)
		{
			final int dataPoolNum = getNumberOfTestObjectsInDataPool();
			if (dataPoolNum == 0)
			{
				throw new RuntimeException("Cannot create any instance: Data pool is empty.");
			}

			throw new RuntimeException("Cannot create any instance: Unknown object id "
			                           + OBJECT_ID + ".");
		}

		int indexCounter = 0;
		for (final String id : ids) {
			if ( id.equals(objectId) )
			{
				return indexCounter;
			}
			indexCounter++;
		}

		return -1;
	}

	private static String getValue(final String field, final int index)
	{
		final List<String> list = dataPool.get(field);
		if (list == null)
		{
			throw new RuntimeException("Unkown field '" + field + "' in class '_Misc'.");
		}

		if (index >= list.size())
		{
			return null;  // no value for this index available
		}

		return list.get(index);
	}

	private static _Misc buildObject(int index)
	{
		final _Misc javaBean = new _Misc();
		MOGLiCCJavaBeanRegistry.register(getObjectIdFromIndex(index), javaBean);
		String value = null;

		value = getValue("Text", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setText( value );

		value = getValue("Ready", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setReady( new Boolean( value ).booleanValue() );

		value = getValue("PrimitivChar", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setPrimitivChar( value.charAt(0) );

		value = getValue("NumberByte", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setNumberByte( new Byte( value ).byteValue() );

		value = getValue("NumberInt", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setNumberInt( new Integer( value ).intValue() );

		value = getValue("NumberLong", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setNumberLong( new Long( value ).longValue() );

		value = getValue("NumberFloat", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setNumberFloat( new Float( value ).floatValue() );

		value = getValue("NumberDouble", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setNumberDouble( new Double( value ).doubleValue() );

		value = getValue("BooleanWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setBooleanWrapper( new Boolean( value ) );

		value = getValue("CharWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setCharWrapper( value.charAt(0) );

		value = getValue("ByteWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setByteWrapper( new Byte( value ) );

		value = getValue("IntWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setIntWrapper( new Integer( value ) );

		value = getValue("LongWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setLongWrapper( new Long( value ) );

		value = getValue("FloatWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setFloatWrapper( new Float( value ) );

		value = getValue("DoubleWrapper", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setDoubleWrapper( new Double( value ) );

		value = getValue("BigDecimal", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setBigDecimal( new BigDecimal( "" + value ) );

		value = getValue("DateTime", index);
		if ( ! StringUtils.isEmpty( value ) )
			javaBean.setDateTime( dateTimeFormatter.parseDateTime( value ) );

		javaBean.setListOfLongs( CollectionsStringUtils.commaSeparatedStringToLongList( getValue("ListOfLongs", index) ) );

		javaBean.setStringList( CollectionsStringUtils.commaSeparatedStringToStringList( getValue("StringList", index) ) );

		javaBean.setStringArray( CollectionsStringUtils.commaSeparatedStringToStringArray( getValue("StringArray", index) ) );

		javaBean.setHashSet( CollectionsStringUtils.commaSeparatedStringToHashSet( getValue("HashSet", index) ) );

		return javaBean;
	}

	static int getNumberOfTestObjectsInDataPool()  {
		final String firstKey = _MiscFactory.dataPool.keySet().iterator().next();
		return _MiscFactory.dataPool.get(firstKey).size();
	}

	/**
	 * Calls createInstanceWithAllFieldsAtMaxLength and addToFieldContent to fields of supported JavaType
	 * (these are: byte, Byte, int, Integer, double, Double, String, java.math.BigDecimal,
    * if MaxLength-metainfo is defined for the corresponding attribute in the data model.
	 * @return instance that causes validation exceptions for the supported fields.
	 */
	public static _Misc createInstanceWithAllSupportedFieldsExceedingMaxLength()
	{
		final _Misc toReturn = createInstanceWithAllFieldsAtMaxLength();

		addToFieldContent(toReturn, "Text", "9");
		addToFieldContent(toReturn, "NumberByte", "9");
		addToFieldContent(toReturn, "ByteWrapper", "9");
		addToFieldContent(toReturn, "LongWrapper", "9");
		addToFieldContent(toReturn, "BigDecimal", "9");

		return toReturn;
	}

	/**
	 * Calls createInstanceWithAllFieldsAtMinLength and cutFromFieldContent to fields of supported JavaType
	 * (these are; byte, Byte, int, Integer, double, Double, String, java.math.BigDecimal),
	 * if MinLength-metainfo is defined for the corresponding attribute in the data model.
	 * @return instance that causes validation exceptions for the corresponding fields.
	 */
	public static _Misc createInstanceWithAllSupportedFieldsNotReachingMinLength()
	{
		final _Misc toReturn = createInstanceWithAllFieldsAtMinLength();

		cutFromFieldContent(toReturn, "Text", 1);
		cutFromFieldContent(toReturn, "BigDecimal", 1);

		return toReturn;
	}

	static
	{
		// fill data pool
		final List<String> textList = new ArrayList<String>();
		dataPool.put("Text", textList);

		final List<String> readyList = new ArrayList<String>();
		dataPool.put("Ready", readyList);

		final List<String> primitivCharList = new ArrayList<String>();
		dataPool.put("PrimitivChar", primitivCharList);

		final List<String> numberByteList = new ArrayList<String>();
		dataPool.put("NumberByte", numberByteList);

		final List<String> numberIntList = new ArrayList<String>();
		dataPool.put("NumberInt", numberIntList);

		final List<String> numberLongList = new ArrayList<String>();
		dataPool.put("NumberLong", numberLongList);

		final List<String> numberFloatList = new ArrayList<String>();
		dataPool.put("NumberFloat", numberFloatList);

		final List<String> numberDoubleList = new ArrayList<String>();
		dataPool.put("NumberDouble", numberDoubleList);

		final List<String> booleanWrapperList = new ArrayList<String>();
		dataPool.put("BooleanWrapper", booleanWrapperList);

		final List<String> charWrapperList = new ArrayList<String>();
		dataPool.put("CharWrapper", charWrapperList);

		final List<String> byteWrapperList = new ArrayList<String>();
		dataPool.put("ByteWrapper", byteWrapperList);

		final List<String> intWrapperList = new ArrayList<String>();
		dataPool.put("IntWrapper", intWrapperList);

		final List<String> longWrapperList = new ArrayList<String>();
		dataPool.put("LongWrapper", longWrapperList);

		final List<String> floatWrapperList = new ArrayList<String>();
		dataPool.put("FloatWrapper", floatWrapperList);

		final List<String> doubleWrapperList = new ArrayList<String>();
		dataPool.put("DoubleWrapper", doubleWrapperList);

		final List<String> bigDecimalList = new ArrayList<String>();
		dataPool.put("BigDecimal", bigDecimalList);

		final List<String> dateTimeList = new ArrayList<String>();
		dataPool.put("DateTime", dateTimeList);

		final List<String> listOfLongsList = new ArrayList<String>();
		dataPool.put("ListOfLongs", listOfLongsList);

		final List<String> stringListList = new ArrayList<String>();
		dataPool.put("StringList", stringListList);

		final List<String> stringArrayList = new ArrayList<String>();
		dataPool.put("StringArray", stringArrayList);

		final List<String> hashSetList = new ArrayList<String>();
		dataPool.put("HashSet", hashSetList);

		final List<String> objectIdList = new ArrayList<String>();
		dataPool.put(OBJECT_ID, objectIdList);

		// set maxLength values
		maxLengths.put("Text", new Integer( 50 ));
		maxLengths.put("NumberByte", new Integer( 1 ));
		maxLengths.put("NumberInt", new Integer( DEFAULT_MAX_LENGTH_NUMBER_VALUE ));
		maxLengths.put("NumberLong", new Integer( DEFAULT_MAX_LENGTH_NUMBER_VALUE ));
		maxLengths.put("ByteWrapper", new Integer( 1 ));
		maxLengths.put("IntWrapper", new Integer( DEFAULT_MAX_LENGTH_NUMBER_VALUE ));
		maxLengths.put("LongWrapper", new Integer( 7 ));
		maxLengths.put("BigDecimal", new Integer( 9 ));

		// set minLength values
		minLengths.put("Text", new Integer( 4 ));
		minLengths.put("NumberByte", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("NumberInt", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("NumberLong", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("ByteWrapper", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("IntWrapper", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("LongWrapper", new Integer( DEFAULT_MIN_LENGTH_NUMBER_VALUE ));
		minLengths.put("BigDecimal", new Integer( 3 ));
	}


	public static _Misc createInstanceWithExampleData() {
		_MiscBuilder builder = new _MiscBuilder();

		builder = builder.withText("Textinhalt 1");
		builder = builder.withReady(false);
		builder = builder.withPrimitivChar('c');
		builder = builder.withNumberByte((byte) 4);
		builder = builder.withNumberInt(123);
		builder = builder.withNumberLong(123456);
		builder = builder.withNumberFloat(12.34F);
		builder = builder.withNumberDouble(123.34);
		builder = builder.withBooleanWrapper(false);
		builder = builder.withCharWrapper( new Character('C') );
		builder = builder.withByteWrapper( new Byte( "3" ) );
		builder = builder.withIntWrapper(12);
		builder = builder.withLongWrapper(new Long(12345));
		builder = builder.withFloatWrapper(new Float(1.343F));
		builder = builder.withDoubleWrapper(12.345);
		builder = builder.withBigDecimal( new BigDecimal("" + 123.4321) );
		builder = builder.withDateTime( dateTimeFormatter.parseDateTime( "05.03.2010 08:59:01:001" ) );
		final List<Long> listListOfLongs = CollectionsStringUtils.commaSeparatedStringToLongList( "1, 2" );
		builder = builder.withListOfLongs( listListOfLongs );
		final List<String> strListStringList = CollectionsStringUtils.commaSeparatedStringToStringList( "a aa, b bb" );
		builder = builder.withStringList( strListStringList );
		final String[] strArrStringArray = CollectionsStringUtils.commaSeparatedStringToStringArray( "aa, bb" );
		builder = builder.withStringArray( strArrStringArray );
		final HashSet<String> strHashSetHashSet = CollectionsStringUtils.commaSeparatedStringToHashSet( "aa, bb" );
		builder = builder.withHashSet( strHashSetHashSet );

		return builder.build();
	}
}