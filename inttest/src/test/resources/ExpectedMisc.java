package com.iksgmbh.moglicc.demo;

import java.lang.Boolean;
import java.lang.Byte;
import java.lang.Character;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import org.joda.time.DateTime;
import com.iksgmbh.moglicc.demo.utils.MOGLiCCJavaBean;

import java.util.*;

/**
 * This class demonstrates that the MOGLiCC JavaBeanGroup supports
 * all java types of the attributes in this class.
 *
 * @author generated by MOGLiCC
 */
public class _Misc implements MOGLiCCJavaBean
{
	// instance fields
	private String registryId;
	private String text;
	private boolean ready;
	private char primitivChar;
	private byte numberByte;
	private int numberInt;
	private long numberLong;
	private float numberFloat;
	private double numberDouble;
	private Boolean booleanWrapper;
	private Character charWrapper;
	private Byte byteWrapper;
	private Integer intWrapper;
	private Long longWrapper;
	private Float floatWrapper;
	private Double doubleWrapper;
	private BigDecimal bigDecimal;
	private DateTime dateTime;
	private List<Long> listOfLongs;
	private List<String> stringList;
	private String[] stringArray;
	private HashSet<String> hashSet;

	// ===============  setter methods  ===============

	public void setRegistryId(final String registryId)
	{
		this.registryId = registryId;
	}

	public void setText(final String text)
	{
		this.text = text;
	}

	public void setReady(final boolean ready)
	{
		this.ready = ready;
	}

	public void setPrimitivChar(final char primitivChar)
	{
		this.primitivChar = primitivChar;
	}

	public void setNumberByte(final byte numberByte)
	{
		this.numberByte = numberByte;
	}

	public void setNumberInt(final int numberInt)
	{
		this.numberInt = numberInt;
	}

	public void setNumberLong(final long numberLong)
	{
		this.numberLong = numberLong;
	}

	public void setNumberFloat(final float numberFloat)
	{
		this.numberFloat = numberFloat;
	}

	public void setNumberDouble(final double numberDouble)
	{
		this.numberDouble = numberDouble;
	}

	public void setBooleanWrapper(final Boolean booleanWrapper)
	{
		this.booleanWrapper = booleanWrapper;
	}

	public void setCharWrapper(final Character charWrapper)
	{
		this.charWrapper = charWrapper;
	}

	public void setByteWrapper(final Byte byteWrapper)
	{
		this.byteWrapper = byteWrapper;
	}

	public void setIntWrapper(final Integer intWrapper)
	{
		this.intWrapper = intWrapper;
	}

	public void setLongWrapper(final Long longWrapper)
	{
		this.longWrapper = longWrapper;
	}

	public void setFloatWrapper(final Float floatWrapper)
	{
		this.floatWrapper = floatWrapper;
	}

	public void setDoubleWrapper(final Double doubleWrapper)
	{
		this.doubleWrapper = doubleWrapper;
	}

	public void setBigDecimal(final BigDecimal bigDecimal)
	{
		this.bigDecimal = bigDecimal;
	}

	public void setDateTime(final DateTime dateTime)
	{
		this.dateTime = dateTime;
	}

	public void setListOfLongs(final List<Long> listOfLongs)
	{
		this.listOfLongs = listOfLongs;
	}

	public void setStringList(final List<String> stringList)
	{
		this.stringList = stringList;
	}

	public void setStringArray(final String[] stringArray)
	{
		this.stringArray = stringArray;
	}

	public void setHashSet(final HashSet<String> hashSet)
	{
		this.hashSet = hashSet;
	}

	// ===============  getter methods  ===============

	public String getRegistryId()
	{
		return registryId;
	}

	public String getText()
	{
		return text;
	}

	public boolean getReady()
	{
		return ready;
	}

	public char getPrimitivChar()
	{
		return primitivChar;
	}

	public byte getNumberByte()
	{
		return numberByte;
	}

	public int getNumberInt()
	{
		return numberInt;
	}

	public long getNumberLong()
	{
		return numberLong;
	}

	public float getNumberFloat()
	{
		return numberFloat;
	}

	public double getNumberDouble()
	{
		return numberDouble;
	}

	public Boolean getBooleanWrapper()
	{
		return booleanWrapper;
	}

	public Character getCharWrapper()
	{
		return charWrapper;
	}

	public Byte getByteWrapper()
	{
		return byteWrapper;
	}

	public Integer getIntWrapper()
	{
		return intWrapper;
	}

	public Long getLongWrapper()
	{
		return longWrapper;
	}

	public Float getFloatWrapper()
	{
		return floatWrapper;
	}

	public Double getDoubleWrapper()
	{
		return doubleWrapper;
	}

	public BigDecimal getBigDecimal()
	{
		return bigDecimal;
	}

	public DateTime getDateTime()
	{
		return dateTime;
	}

	public List<Long> getListOfLongs()
	{
		return listOfLongs;
	}

	public List<String> getStringList()
	{
		return stringList;
	}

	public String[] getStringArray()
	{
		return stringArray;
	}

	public HashSet<String> getHashSet()
	{
		return hashSet;
	}

	// ===============  additional Javabean methods  ===============

	@Override
	public String toString()
	{
		return "_Misc ["
				+ "text = " + text + ", "
				+ "ready = " + ready + ", "
				+ "primitivChar = " + primitivChar + ", "
				+ "numberByte = " + numberByte + ", "
				+ "numberInt = " + numberInt + ", "
				+ "numberLong = " + numberLong + ", "
				+ "numberFloat = " + numberFloat + ", "
				+ "numberDouble = " + numberDouble + ", "
				+ "booleanWrapper = " + booleanWrapper + ", "
				+ "charWrapper = " + charWrapper + ", "
				+ "byteWrapper = " + byteWrapper + ", "
				+ "intWrapper = " + intWrapper + ", "
				+ "longWrapper = " + longWrapper + ", "
				+ "floatWrapper = " + floatWrapper + ", "
				+ "doubleWrapper = " + doubleWrapper + ", "
				+ "bigDecimal = " + bigDecimal + ", "
				+ "dateTime = " + dateTime + ", "
				+ "listOfLongs = " + listOfLongs + ", "
				+ "stringList = " + stringList + ", "
				+ "stringArray = " + Arrays.toString(stringArray) + ", "
				+ "hashSet = " + hashSet + ""
				+ ", registryId = " + registryId
				+ "]";
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;

		final _Misc other = (_Misc) obj;

		if (text == null)
		{
			if (other.text != null)
				return false;
		} else
		{
			if (! text.equals(other.text))
				   return false;
		}
		if (ready != other.ready)
			return false;
		if (primitivChar != other.primitivChar)
			return false;
		if (numberByte != other.numberByte)
			return false;
		if (numberInt != other.numberInt)
			return false;
		if (numberLong != other.numberLong)
			return false;
		if (Float.floatToIntBits(numberFloat) != Float.floatToIntBits(other.numberFloat))
			return false;
		if (Double.doubleToLongBits(numberDouble) != Double.doubleToLongBits(other.numberDouble))
			return false;
		if (booleanWrapper == null)
		{
			if (other.booleanWrapper != null)
				return false;
		} else
		{
			if (! booleanWrapper.equals(other.booleanWrapper))
				   return false;
		}
		if (charWrapper == null)
		{
			if (other.charWrapper != null)
				return false;
		} else
		{
			if (! charWrapper.equals(other.charWrapper))
				   return false;
		}
		if (byteWrapper == null)
		{
			if (other.byteWrapper != null)
				return false;
		} else
		{
			if (! byteWrapper.equals(other.byteWrapper))
				   return false;
		}
		if (intWrapper == null)
		{
			if (other.intWrapper != null)
				return false;
		} else
		{
			if (! intWrapper.equals(other.intWrapper))
				   return false;
		}
		if (longWrapper == null)
		{
			if (other.longWrapper != null)
				return false;
		} else
		{
			if (! longWrapper.equals(other.longWrapper))
				   return false;
		}
		if (floatWrapper == null)
		{
			if (other.floatWrapper != null)
				return false;
		} else
		{
			if (! floatWrapper.equals(other.floatWrapper))
				   return false;
		}
		if (doubleWrapper == null)
		{
			if (other.doubleWrapper != null)
				return false;
		} else
		{
			if (! doubleWrapper.equals(other.doubleWrapper))
				   return false;
		}
		if (bigDecimal == null)
		{
			if (other.bigDecimal != null)
				return false;
		} else
		{
			if (! bigDecimal.equals(other.bigDecimal))
				   return false;
		}
		if (dateTime == null)
		{
			if (other.dateTime != null)
				return false;
		} else
		{
			if (! dateTime.equals(other.dateTime))
				   return false;
		}
		if (listOfLongs == null)
		{
			if (other.listOfLongs != null)
				return false;
		} else
		{
			if (! listOfLongs.equals(other.listOfLongs))
				   return false;
		}
		if (stringList == null)
		{
			if (other.stringList != null)
				return false;
		} else
		{
			if (! stringList.equals(other.stringList))
				   return false;
		}
		if (!Arrays.equals(stringArray, other.stringArray))
			return false;
		if (hashSet == null)
		{
			if (other.hashSet != null)
				return false;
		} else
		{
			if (! hashSet.equals(other.hashSet))
				   return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;

		result = prime * result + ((text == null) ? 0 : text.hashCode());
 		result = prime * result + (ready ? 1231 : 1237);
		result = prime * result + primitivChar;
		result = prime * result + numberByte;
		result = prime * result + numberInt;
 		result = prime * result + (int) (numberLong ^ (numberLong >>> 32));
 		result = prime * result + Float.floatToIntBits(numberFloat);
		long temp = Double.doubleToLongBits(numberDouble);
		result = prime * result + (int) (temp ^ (temp >>> 32));
		result = prime * result + ((booleanWrapper == null) ? 0 : booleanWrapper.hashCode());
		result = prime * result + ((charWrapper == null) ? 0 : charWrapper.hashCode());
		result = prime * result + ((byteWrapper == null) ? 0 : byteWrapper.hashCode());
		result = prime * result + ((intWrapper == null) ? 0 : intWrapper.hashCode());
		result = prime * result + ((longWrapper == null) ? 0 : longWrapper.hashCode());
		result = prime * result + ((floatWrapper == null) ? 0 : floatWrapper.hashCode());
		result = prime * result + ((doubleWrapper == null) ? 0 : doubleWrapper.hashCode());
		result = prime * result + ((bigDecimal == null) ? 0 : bigDecimal.hashCode());
		result = prime * result + ((dateTime == null) ? 0 : dateTime.hashCode());
		result = prime * result + ((listOfLongs == null) ? 0 : listOfLongs.hashCode());
		result = prime * result + ((stringList == null) ? 0 : stringList.hashCode());
		result = prime * result + Arrays.hashCode(stringArray);
		result = prime * result + ((hashSet == null) ? 0 : hashSet.hashCode());
		result = prime * result + ((registryId == null) ? 0 : registryId.hashCode());

		return result;
	}


    private int hashCodeOfListOfDomainObjects(List<? extends MOGLiCCJavaBean> list) {
        int hashCode = 1;
        for (MOGLiCCJavaBean javaBean : list)
		 {
			if (javaBean != null)
               hashCode = 31*hashCode + (javaBean==null ? 0 : javaBean.getRegistryId().hashCode());
		 }
       return hashCode;
    }

    private String toStringForListOfDomainObjects(List<? extends MOGLiCCJavaBean> list)
    {
		if ( list == null )
			 return "[]";

    	final StringBuffer sb = new StringBuffer("[");

    	for (MOGLiCCJavaBean javaBean : list)
		 {
			if (javaBean != null)
               sb.append(javaBean.getRegistryId()).append("|");
		 }
    	final String s = sb.toString();
    	return s.substring(0, s.length() - 1) + "]";
    }
}