##############################################################################################################
# This properties file allows the definition of the model file which is applied for code generation.
# If no model file can be read from this file and only one model file exists,
# this model file is applied for code generation.
#
# In addition, you can redefine here the symbol that is used as separator when parsing
# MetaInfo lines of the model file. Per default, this symbol is a Double Quote.
# Thus MetaInfo's with spaces can be defined in this way:
#
# MetaInfo ErrorMessage "Here is something wrong."
#
# In order to use Double Quotes in values of MetaInfos
# you have to redefine the separator symbol in this way:
#
# BraceSymbolForModelFileParsing=*
#
# With this setting, you can define MetaInfos that way:
#
# MetaInfo ErrorMessage *Here is "something" wrong.*
#
###############################################################################################################


# MOGLiCC comes with default data for the following types of application:


# Declaring this model makes MOGLiCC to use the MOGLiJavaBean-Templates.
# Use it to generate a new maven project containing a number of domain objects.
# This demonstrates the power of the ExcelModelProvider, the ClassBasedFileMaker and the ModelBasedTreeBuilder.
modelfile=MavenProjectWithJavaDomainModel.txt


# Declaring this model makes MOGLiCC to use the MOGLiJavaBean-Templates, but without using the mechanism of the JavaBeanRegistry.
# Use it to generate a new maven project containing a number of domain objects.
# This registry allows reciprocal dependencies between model classes at the cost of additional complexity in the generated code.
#modelfile=MavenProjectWithJavaDomainModel_No_BeanRegistry.txt


# Declaring this model makes MOGLiCC to use the MOGLiCC_NewPluginModel-Templates.
# It is used to create Stub-Implementations for new MOGLiCC plugins.
#modelfile=MOGLiCC_NewPluginModel.txt


# Declaring this model makes MOGLiCC to use the ConsoleComicStrip-Templates.
# Use it to create the Moglydick script that tells a little picture story when executed.
# This demonstrates the power of the ClassBasedFileMaker, the ModelBasedLineInserter and the interaction of both.
#modelfile=Moglydick.txt


# Declaring this model makes MOGLiCC to use the XMLBuilder-Templates.
# Use it to create an xml file that represents a ShoppingCart.
# This demonstrates the power of the ModelBasedLineInserter.
#modelfile=ShoppingCart.txt