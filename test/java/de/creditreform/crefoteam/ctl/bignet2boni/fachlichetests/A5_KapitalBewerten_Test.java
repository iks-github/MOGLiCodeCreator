package de.creditreform.crefoteam.ctl.bignet2boni.fachlichetests;

import java.math.BigDecimal;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import de.creditreform.crefoteam.ctl.bignet2.codes.PaymentBehaviourCode;
import de.creditreform.crefoteam.ctl.bignet2boni.ExecStep;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.BoniDataWrapper;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.BoniDataWrapper.Boni2ErmittlungResult;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaKrediturteil;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaZahlungsweise;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaHoechstKrediturteil;
import de.creditreform.crefoteam.ctl.bignet2boni.steps.*;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings.ReportType;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.StandardBoni2Konfiguration;

/**
* Fachliche Tests fuer Schritt A5_KapitalBewerten der CtlBignet2BoniErmittlung.
* Diese Klasse wurde aus den von Udo Cirkel spezifizierten Testdaten
* (siehe #Boni-Konzept_BIGNet2XML_CTL50172_Testfaelle.xlsx')
* autogeneriert.
*
* ACHTUNG: Nicht manuell aendern !
*
* @author generated by MOGLiCC
*/
public class A5_KapitalBewerten_Test
{
	private ExecStep cut;
	private BoniDataWrapper boniData;

	@Before
	public void setup()
	{
		cut = new A5_KapitalBewerten();  // class under test
		boniData = BoniDataWrapper.getNewInstance();

		final StandardBoni2Konfiguration boni2Konfiguration = new StandardBoni2Konfiguration();
		ProduktSpezifischeConfigSettings produktSpezifischeConfigSettings = new ProduktSpezifischeConfigSettings(ReportType.EXTENDED);
		boni2Konfiguration.setProduktSpezifischeConfigSettings(produktSpezifischeConfigSettings);
		boniData.config = boni2Konfiguration;
	}

	@Test
	public void executeTF_A5_1()
	{
		// arrange
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(430) ;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = null;
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_2()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(270) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_3()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_032");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(270) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_4()
	{
		// arrange
		boniData.parameter.bix = new Integer(431);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_43");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(431) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_43");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_5()
	{
		// arrange
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(380) ;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = null;
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_6()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(264) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_7()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20001" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_032");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(264) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_8()
	{
		// arrange
		boniData.parameter.bix = new Integer(381);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_39");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(381) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_39");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_9()
	{
		// arrange
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "6001" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(300) ;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = null;
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_10()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "6001" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(250) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_11()
	{
		// arrange
		boniData.parameter.bix = new Integer(200);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "6001" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_032");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(250) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_12()
	{
		// arrange
		boniData.parameter.bix = new Integer(301);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_43");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "6001" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(301) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_43");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_13()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_14()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_15()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_16()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "20001" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "20000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_17()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "6000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_18()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "5999" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "4000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_19()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "-1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(200) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_20()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "10001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(200) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_21()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "10001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(200) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A5_22()
	{
		// arrange
		boniData.parameter.bix = new Integer(150);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "4000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "6000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(150) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}
}