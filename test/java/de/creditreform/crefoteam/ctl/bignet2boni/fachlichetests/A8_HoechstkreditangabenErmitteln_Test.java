package de.creditreform.crefoteam.ctl.bignet2boni.fachlichetests;

import java.math.BigDecimal;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import de.creditreform.crefoteam.ctl.bignet2.codes.PaymentBehaviourCode;
import de.creditreform.crefoteam.ctl.bignet2boni.ExecStep;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.BoniDataWrapper;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.BoniDataWrapper.Boni2ErmittlungResult;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaKrediturteil;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaZahlungsweise;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.AaaHoechstKrediturteil;
import de.creditreform.crefoteam.ctl.bignet2boni.steps.*;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings.ReportType;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.StandardBoni2Konfiguration;

/**
* Fachliche Tests fuer Schritt A8_HoechstkreditangabenErmitteln der CtlBignet2BoniErmittlung.
* Diese Klasse wurde aus den von Udo Cirkel spezifizierten Testdaten
* (siehe #Boni-Konzept_BIGNet2XML_CTL50172_Testfaelle.xlsx')
* autogeneriert.
*
* ACHTUNG: Nicht manuell aendern !
*
* @author generated by MOGLiCC
*/
public class A8_HoechstkreditangabenErmitteln_Test
{
	private ExecStep cut;
	private BoniDataWrapper boniData;

	@Before
	public void setup()
	{
		cut = new A8_HoechstkreditangabenErmitteln();  // class under test
		boniData = BoniDataWrapper.getNewInstance();

		final StandardBoni2Konfiguration boni2Konfiguration = new StandardBoni2Konfiguration();
		ProduktSpezifischeConfigSettings produktSpezifischeConfigSettings = new ProduktSpezifischeConfigSettings(ReportType.EXTENDED);
		boni2Konfiguration.setProduktSpezifischeConfigSettings(produktSpezifischeConfigSettings);
		boniData.config = boni2Konfiguration;
	}

	@Test
	public void executeTF_A8_1()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_2()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "15000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_3()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "15000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_4()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_5()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_6()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_7()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_8()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_9()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_10()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_01");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_11()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_12()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_13()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_14()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_15()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_16()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_17()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_18()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_19()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_20()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_21()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_22()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_23()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_24()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_25()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_26()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_11");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_19");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_27()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_19");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_28()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_29()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_30()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_31()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_32()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_33()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_34()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_41");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_35()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_36()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_37()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_38()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_39()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_40()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_51");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_41()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_42()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_43()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_44()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_45()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_46()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_61");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_47()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_48()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_49()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_50()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_51()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_52()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_74");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_53()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "-1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_54()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_55()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_56()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "999" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_57()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_58()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "2500" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_59()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "2499" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "2500" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_60()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "2500" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "2500" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_61()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "2501" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "5000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_62()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "5000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "5000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_63()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "5001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "10000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_64()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "10000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_65()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "15000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_66()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "15000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_67()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_68()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "20000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_69()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "20001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "25000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_70()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "25000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "25000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_71()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "25001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_72()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "30000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_73()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "30001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "35000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_74()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "35000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "35000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_75()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "35001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "40000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_76()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "40000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "40000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_77()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "40001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "45000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_78()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "45000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "45000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_79()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "45001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "50000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_80()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "50000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "50000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_81()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "50001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "60000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_82()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "60000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "60000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_83()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "60001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "70000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_84()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "70000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "70000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_85()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "70001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "80000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_86()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "80000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "80000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_87()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "80001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "90000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_88()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "90000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "90000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_89()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "90001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "100000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_90()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "100000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "100000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_91()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "100001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "125000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_92()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "125000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "125000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_93()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "125001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_94()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_95()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "175000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_96()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "175000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "175000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_97()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "175001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "200000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_98()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "200000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_99()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "200001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "250000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_100()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "250000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "250000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_101()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "250001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "300000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_102()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "300000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "300000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_103()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "300001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "350000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_104()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "350000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "350000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_105()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "350001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "400000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_106()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "400000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "400000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_107()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "400001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "450000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_108()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "450000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "450000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_109()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "450001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "500000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_110()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "500000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "500000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_111()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "500001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "600000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_112()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "600000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "600000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_113()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "600001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "700000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_114()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "700000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "700000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_115()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "700001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "800000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_116()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "800000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "800000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_117()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "800001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "900000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_118()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "900000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "900000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_119()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "900001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_120()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_121()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_122()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "2000000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_123()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_124()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "150000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_125()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_126()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_127()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "20000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_128()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "150000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_129()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "12000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "70000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_130()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "12000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "500000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "70000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "30000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "80000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_131()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "500000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "70000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "30000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_132()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "12000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "500000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "70000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "30000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "60000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_133()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "700000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "120000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "80030" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "30000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_134()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "700000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "120000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "80000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "30000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_135()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "250000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "25000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_136()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "300000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_137()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "17000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "33000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "600000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "500000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "10000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_138()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "17000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "33000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "600000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "500000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_139()
	{
		// arrange
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "600000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "500000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = null;
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "50000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_140()
	{
		// arrange
		boniData.parameter.bix = new Integer(170);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(170) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "10000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_141()
	{
		// arrange
		boniData.parameter.bix = new Integer(170);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_21");
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "17000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "33000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "600000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "500000" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(170) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}

	@Test
	public void executeTF_A8_142()
	{
		// arrange
		boniData.parameter.bix = new Integer(170);
		boniData.parameter.zahlungsweise = AaaZahlungsweise.valueOf("_22");
		boniData.parameter.krediturteil = AaaKrediturteil.valueOf("_31");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000001" );

		// act
		cut.exec(boniData);

		// assert
		final Integer expectedBix = new Integer(170) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
		Assert.assertEquals("Status", Boni2ErmittlungResult.OK.name(), boniData.status.name());
	}
}