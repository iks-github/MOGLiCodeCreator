package de.creditreform.crefoteam.ctl.bignet2boni.fachlichetests;

import static org.junit.Assert.fail;

import java.math.BigDecimal;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import de.creditreform.crefoteam.ctl.bignet2.codes.*;
import de.creditreform.crefoteam.ctl.bignet2boni.*;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.BoniDataWrapper;
import de.creditreform.crefoteam.ctl.bignet2boni.enums.aaa.*;
import de.creditreform.crefoteam.ctl.bignet2boni.steps.*;
import de.creditreform.crefoteam.ctl.bignet2boni.testutils.*;
import de.creditreform.crefoteam.ctl.ctlutils.UnscharfesDatum;
import de.creditreform.crefoteam.ctl.bignet2boni.utils.*;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.ProduktSpezifischeConfigSettings.ReportType;
import de.creditreform.crefoteam.ctl.bignet2boni.bonidata.StandardBoni2Konfiguration;

/**
* Fachliche Tests fuer Schritt 2 (Model Execution) der CtlBignet2BoniErmittlung f√ºr Extended Reports.
* Diese Klasse wurde aus den von Udo Cirkel spezifizierten Testdaten
* (siehe #Boni-Konzept_BIGNet2XML_CTL50172_Testfaelle.xlsx')
* autogeneriert.
*
* ACHTUNG: Nicht manuell aendern !
*
* @author generated by MOGLiCC
*/
public class ModelExtecutionExtendedReport_Test
{
	private ExecModel cut;
	private BoniDataWrapper boniData;

	@Before
	public void setup()
	{
		cut = StandardExecModelFactory.getStandardExecutionModel();  // class under test
		boniData = BoniDataWrapper.getNewInstance();

		final StandardBoni2Konfiguration boni2Konfiguration = new StandardBoni2Konfiguration();
		ProduktSpezifischeConfigSettings produktSpezifischeConfigSettings = new ProduktSpezifischeConfigSettings(ReportType.EXTENDED);
		boni2Konfiguration.setProduktSpezifischeConfigSettings(produktSpezifischeConfigSettings);
		boniData.config = boni2Konfiguration;
	}

	@Test
	public void executeTF_AAA_ER_1()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("NEW");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_020");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_001");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2014-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_11");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_2()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("NEW");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_005");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2014-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_01");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_3()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("NEW");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2013-07" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1250000" );

		try {
			// act
			ModelExecutor.doYourJob(boniData, cut);
			fail("Expected exception was not thrown!");
		} catch (BoniInkonstistenzException e) {
			// success
		}

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_4()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_020");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2014-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_11");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_5()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("INS");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_080");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(600) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_60");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_6()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_049");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "130000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "4629914" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2885415" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "648847" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "4629914" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2885415" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "648847" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "22894430" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(241) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_7()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_010");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1500" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "5000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(500) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_8()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_049");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "53000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "4708520" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2274350" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "0" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "2383760" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "67" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "4708520" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2274350" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "0" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "2383760" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "67" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "67" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(241) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_01");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "60000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_9()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.businessStatusCode = BusinessStatusCode.valueOf( "_001" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "43750000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_72");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_10()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_080");
		boniData.bignetData.businessStatusCode = BusinessStatusCode.valueOf( "_002" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(600) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_60");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_11()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_084");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_020");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_004");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "4708520" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2274350" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "0" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "2383760" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "4708520" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2274350" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "0" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "2383760" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "67" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(131) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_11");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "250000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_12()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_050");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_004");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(304) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_13()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_041");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_004");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "15000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(340) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_14()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("CMP");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_050");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(500) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_41");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_15()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_045");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "16759" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "9637860" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(261) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "70000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_16()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_020");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(397) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_17()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_000");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_070");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(600) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_58");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_61");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_18()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_053");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "30000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(294) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_19()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("CBA");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "16759" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_20()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_017");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(429) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_21()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_017");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(417) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_22()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("REO");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_060");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "7503620" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "7381480" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "955299" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "16759" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "3000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(430) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_55");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_23()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_038");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_051");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "400000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "300000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "250000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(350) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_42");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_24()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_084");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "3255919" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1002462" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "2097864" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "1075200" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "3255919" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1002462" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "2097864" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "1075200" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "1075200" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "55555" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(131) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_25()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_022");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "2016" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "240132" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "299126" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "30301" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "125000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "240132" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "299126" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "30301" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "125000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "125000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(385) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_26()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_041");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "110000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "35984000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "11756000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-20985000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "35984000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "11756000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-20985000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "727280" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(354) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_27()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_084");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "3255919" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1002462" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "2097864" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "1075200" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "3255919" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1002462" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "2097864" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "1075200" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "1075200" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(131) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "250000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_28()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_072");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "142000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "1280000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "1280000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(158) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_29()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_063");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "36782000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "35984000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "4954000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "36782000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "35984000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "4954000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "152870630" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(191) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "800000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_30()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_049");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_031");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "50000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "30000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "50000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "50000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "30000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "50000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "40000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(241) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_31()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_030");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_050");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(338) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_41");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_32()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "24513" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "18701" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "12658" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "18600" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "24513" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "18701" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "12658" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "18600" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "18600" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(175) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_33()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "103329199" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "45722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "103329199" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "45722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "21814630" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "192777166" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_19");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_34()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "2777166" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "30000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_35()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "50000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "500000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_36()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_044");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1165930" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-1165930" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "2777166" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(339) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_37()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "5722918" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "600000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_38()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "5722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "5722918" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "600000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_39()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "5722918" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "600000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_40()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "500000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "500000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "50000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_41()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_002");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "55000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "100" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "55000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "50000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "100" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "100000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(171) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_42()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_002");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2013-12-02" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "10000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_43()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("PAR");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "0" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_71");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_44()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("NEW");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_020");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_001");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2013-12-02" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1250000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_11");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_45()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("NEW");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_020");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_001");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2013-07" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2013-07-31" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "1250000" );

		try {
			// act
			ModelExecutor.doYourJob(boniData, cut);
			fail("Expected exception was not thrown!");
		} catch (BoniInkonstistenzException e) {
			// success
		}

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_46()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_035");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_040");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_005");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2011-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(340) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_32");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_47()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_014");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_050");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_004");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "1000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2011-01-01" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(500) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_41");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_41");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_42");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_48()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_089");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2013-07" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2013-07-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "1340392.74" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "11914.48" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "16547.95" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "268078.55" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(121) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "50000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_49()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-06-24" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_089");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_002");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-08-13" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2000-08-15" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "50000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(121) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "500000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_50()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-10" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_067");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "10000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(237) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_51()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-10" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_060");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "100000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(252) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_52()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-10" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_060");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "2000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "10000000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(202) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_53()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_067");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "1000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "200000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "1000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-1000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "5000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "100000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(241) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "5000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_54()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_067");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "43750000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(227) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "450000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_55()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_080");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_003");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "120000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2014-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "37500000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_01");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_05");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_56()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "10000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "10000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_57()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_087");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "103329199" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "45722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "103329199" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "45722918" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "165480.46" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(125) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_11");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_19");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_58()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_067");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_030");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "1999" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "1999-12-05" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1000000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-1000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "1000000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "10000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(241) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_22");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "1000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_59()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-06-24" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_089");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_004");
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-08-13" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2000-08-15" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "123456789" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(121) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_29");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_21");
		final BigDecimal expectedHKV = new BigDecimal( "1000000" );
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_19");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_60()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_030");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_021");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_006");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "9918.91" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "100000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-1000" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "21814629" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.gezeichnetesKapital = new BigDecimal( "21814630" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "165480.46" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(410) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_39");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_61()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_006");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.businessStatusCode = BusinessStatusCode.valueOf( "_003" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "43750000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_74");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_62()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("CON");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_006");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-05-05" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2000-08-08" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "107231.42" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(430) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_39");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_51");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_52");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_63()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-07-07" );
		boniData.bignetData.ratingData.ratingNonAvailabilityReasonCode = RatingNonAvailibilityReasonCode.valueOf("PAR");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_010");
		boniData.bignetData.ratingData.creditRiskCode = CreditRiscCode.valueOf("_006");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "10000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-05-05" );
		boniData.bignetData.historiendaten.firstRegistrationDate = new UnscharfesDatum( "2000-08-08" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.umlaufvermoegen = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.kurzfristigeVerbindlichkeiten = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.rechnungsabgrenzungPassiva = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eingezahltesKapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.umlaufvermoegen = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.kurzfristigeVerbindlichkeiten = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.rechnungsabgrenzungPassiva = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "13403.93" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eingezahltesKapital = new BigDecimal( "2924017.16" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "107231.42" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = null;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_71");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_71");
		final BigDecimal expectedHKV = null;
		final AaaHoechstKrediturteil expectedHKU = AaaHoechstKrediturteil.valueOf("_66");

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_64()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-06-24" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_044");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "277700" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(275) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_65()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-06-24" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_044");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerKapitalPruefung.eigenkapital = new BigDecimal( "-1165930" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.eigenkapital = new BigDecimal( "-1165930" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "2770000" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(339) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}

	@Test
	public void executeTF_AAA_ER_66()
	{
		// arrange
		boniData.bignetData.abrufZeitpunkt = DateUtil.toDateTime( "2014-06-24" );
		boniData.bignetData.ratingData.ratingCode = RatingCode.valueOf("_044");
		boniData.bignetData.ratingData.paymentBehaviourCode = PaymentBehaviourCode.valueOf("_053");
		boniData.bignetData.ratingData.creditLimitOfPartnerInEuro = new BigDecimal( "150000" );
		boniData.bignetData.historiendaten.foundationDate = new UnscharfesDatum( "2000-01-01" );
		boniData.bignetData.kapitalAngabenFuerHoechstkreditBerechnung.jahresumsatz = new BigDecimal( "7777166" );

		// act
		ModelExecutor.doYourJob(boniData, cut);

		// assert
		final Integer expectedBix = new Integer(275) ;
		final AaaZahlungsweise expectedZW = AaaZahlungsweise.valueOf("_51");
		final AaaKrediturteil expectedKU = AaaKrediturteil.valueOf("_31");
		final BigDecimal expectedHKV = new BigDecimal( "150000" );
		final AaaHoechstKrediturteil expectedHKU = null;

		Assert.assertEquals("BIX", expectedBix, boniData.parameter.bix);
		Assert.assertEquals("Zahlungsweise", expectedZW, boniData.parameter.zahlungsweise);
		Assert.assertEquals("Krediturteil", expectedKU, boniData.parameter.krediturteil);
		Assert.assertEquals("Hoechstkreditvorschlag", expectedHKV, boniData.parameter.hoechstkreditvorschlag);
		Assert.assertEquals("Hoechstkrediturteil", expectedHKU, boniData.parameter.hoechstkrediturteil);
	}
}