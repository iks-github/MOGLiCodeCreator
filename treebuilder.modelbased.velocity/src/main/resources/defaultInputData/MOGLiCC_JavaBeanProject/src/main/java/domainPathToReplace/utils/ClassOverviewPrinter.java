/*
 * Copyright 2016 IKS Gesellschaft fuer Informations- und Kommunikationssysteme mbH
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package <domainPathToReplace>.utils;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

/**
 * This class allows to print out an overview of all classes generated by MOGLiCC in this project.
 * 
 * @author Reik Oberrath
 */
public class ClassOverviewPrinter 
{
	private static HashMap<File, List<File>> content = new HashMap<File, List<File>>();

	public static void main(String[] args)
	{
		final File userDir = new File(System.getProperty("user.dir"));
		analyseContent(userDir);
		System.out.println("Source content of project directory '" + userDir.getName() + "':");
		System.out.println();

		final Set<File> keySet = content.keySet();
		for (final File dir : keySet) {
			if (!dir.getAbsolutePath().contains("target\\classes") && !dir.getAbsolutePath().contains("target\\test-classes")) {
				final List<File> list = content.get(dir);
				if (list.size() > 0) {
					System.out.println("Content of " + dir + ":");
					for (final File file : list) {
						System.out.println("    " + file.getName());
					}
				}
			}
		}
	}

	private static void analyseContent(final File dir)
	{
		final List<File> subFolders = new ArrayList<File>();
		final List<File> files = new ArrayList<File>();

		final File[] listFiles = dir.listFiles();
		for (final File file : listFiles) {
			if (file.isDirectory()) {
				subFolders.add(file);
			} else {
				if (!file.getName().startsWith(".")) { // ignore config files
					files.add(file);
				}
			}
		}

		if (!dir.getName().startsWith(".")) { // ignore config dirs
			content.put(dir, files);
		}

		for (final File subFolder : subFolders) {
			analyseContent(subFolder);
		}
	}
}