I Preconditions for Release

1. All Unit- (UnitTestExecutor.java), Integration- (tests in project 'inttest') and Systemtests (UnitTestExecutor.java) are known to be green.
2. All sources relevant for the release have been merged to the master branch in the iks-github repository.
3. The master branch is actually checkout out!
4. Check for correct version settings in following files:
   a) application/src/main/resources/build.properties,
   b) readme.md in root
5. All htm-files are known to be UTF-coded (in case of doubt, check with Notepad++).
6. All JavaDoc-files are known to be up to date (execute createJavaDoc.bat in VelocityEngineProvider and StandardModelProvider.
6. Execute the JavaFileLicenseIncluder to ensure that all java files contain the license text.



II Perform the Release

1. Add changes between the current and last version (the release notes) to the version history in the readme.md of the repository root.
2. In file 'application/src/main/resources/build.properties' set property 'testRun' to 'false'.
3. Perform the complete quality assurance by executing 'application/mavenScripts/runAllSteps.sh' or'application/mavenScripts/windows/runAllSteps.bat'
   and assure that all steps are successful! Alternatively, perform the four steps manually:
   a) Execute unit tests for ReleaseBuilder (use BuildTestExecutor.java) if Release Builder Code has changed.
   b) Execute 'mvn install' on the parent project - this unit tests and creates the binaries.
   c) Execute integration tests (Start 'Run as JUnit Test' on the project 'inttest').
   d) Execute 'BuildReleaseAndTestSystem.java' as JUnit test. This builds the release candidate and executes the system tests automatically on it.
   For different test results between scripted and manual test execution, assure that Java VM used is the same!
4. Verify that in your workspace in 'application/releaseBuilds' the Release Candidate can be found.
   If not check that property 'testRun' is 'false' in file 'application/src/main/resources/build.properties'.
5. In file 'application/src/main/resources/build.properties' set property 'testRun' back to 'true'.
   This allows test runs of the release process executed automatically by 'BuildReleaseAndTestSystem.java'.
6. In file 'application/src/main/resources/build.properties' adapt the three version settings to new (higher) values!

    
 
III Finishing steps

1. Refresh the workspace and perform the complete quality assurance of II 3 again, to check that the new versions (set in II 6) are set correctly.
   When using the maven scripts, make sure you execute "mvn clean install" on the parent. Otherwise artefacts will not be found.
2. Add new files (git add .) and then commit the current sources in the master branch with comment (git commit -a -m 'Release X.Y.Z').
3. Create a tag for the current release (git tag vX.Y.Z).
4. Push changes to the github remote repository and verify the github repository that in 'application/releaseBuilds' the Release Candidate can be found. 
5. Eventually merge the new changes to other branches such as 'development', add, commit and push.
5. Set new version in Github-Wiki: https://github.com/iks-github/MOGLiCodeCreator/wiki
6. Draft a new Release Entry: https://github.com/iks-github/MOGLiCodeCreator/releases with the release notes defined in II 1.

