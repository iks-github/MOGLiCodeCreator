@TargetFileName ${classDescriptor.simpleName}FactoryUnitTest.java # Name of output file with extension but without path
@TargetDir $model.getMetaInfoValueFor("eclipseProjectDir")/$model.getMetaInfoValueFor("projectName")/src/test/java/<package>
@CreateNew true # creates target dir if not existing and overwrites target file if existing
@NameOfValidModel MOGLiCC_JavaBeanModel

package ${classDescriptor.package}.factory;
'
import static org.junit.Assert.*;
'
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;
'
import java.util.*;
'
import org.junit.*;
'
import ${classDescriptor.package}.*;
import ${classDescriptor.package}.factory.*;
import ${classDescriptor.package}.utils.*;
import ${classDescriptor.package}.validator.*;
'
/**
* Tests basic JavaBean functionality for '${classDescriptor.simpleName}Factory.java'
*
* @author generated by MOGLiCC
*/
public class ${classDescriptor.simpleName}FactoryUnitTest 
{
'
'	private final static DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("$model.getMetaInfoValueFor("dateTimeFormat")");
'
#set( $useJavaBeanRegistry = $model.getMetaInfoValueFor("useJavaBeanRegistry") )

#if ( $useJavaBeanRegistry == "true" )

	'
	'	@Before
	'	public void setup()
	'	{
	'		MOGLiCCJavaBeanRegistry.clear();
	'	}
	'
	
#end

#parse("B_buildReturnsFirstMethod.tpl")

'	

#parse("C_buildReturnsAllMethod.tpl")

'
'	@Test
'	public void removesAllDataFromOptionalFields() {
'		// arrange
'		final ${classDescriptor.simpleName} instance1 = ${classDescriptor.simpleName}Factory.createInstanceWithAllFieldsAtMaxLength();
'		final ${classDescriptor.simpleName} instance2 = ${classDescriptor.simpleName}Factory.createInstanceWithAllFieldsAtMaxLength();
'
'		// act 
'		final ${classDescriptor.simpleName} instance3 = ${classDescriptor.simpleName}Factory.createInstanceOnlyWithMandatoryFields();  // indirect test
'		${classDescriptor.simpleName}Factory.removeAllDataFromOptionalFields(instance1); // direct test
'
'		// assert 
'		${classDescriptor.simpleName}Validator.doYourJob(instance1); // throws ValidationException in error case
'		${classDescriptor.simpleName}Validator.doYourJob(instance3); // throws ValidationException in error case

		#foreach($attributeDescriptor in $classDescriptor.attributeDescriptorList)
		
			#set( $Mandatory = $attributeDescriptor.getMetaInfoValueFor("Mandatory") )
		
			#if ($Mandatory != "true")
			
				#set( $AttributeName = $TemplateStringUtility.firstToUpperCase($attributeDescriptor.name) ) 
			    #set( $javaType = $attributeDescriptor.getMetaInfoValueFor("JavaType") )
	
				#parse("commonSubtemplates/isJavaTypeDomainObject.tpl")
				
				#if ( $isJavaTypeDomainObject.equals( "true" ) || $TemplateJavaUtility.isPrimitiveTypeWrapper($javaType) )

					'		
					'		assertNull("null expected for ${AttributeName}", instance1.get${AttributeName}());
					'		assertNotNull("not null expected for ${AttributeName}", instance2.get${AttributeName}());
					'		assertNull("null expected for ${AttributeName}", instance3.get${AttributeName}());

				#end
							
			#end

		#end
'	}
'

#parse("D_buildReturnsInstanceWithAllFieldsAtMaxLength.tpl")

'

#parse("E_buildReturnsInstanceWithAllFieldsAtMinLength.tpl")

'
'	@Test
'	public void thowsExceptionForTooMany() {
'		try {
'			${classDescriptor.simpleName}Factory.createFirstFromDataPool(999999999);
'			fail("Expected exception was not thrown!");
'		} catch (Exception e) {
'			assertEquals("Error message", "Error: Cannot provide 999999999 ${classDescriptor.simpleName} objects. " +
'					                      "Pool contains only " + ${classDescriptor.simpleName}Factory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
'		}
'	}
'	
'	@Test
'	public void returnsByIndex() {
'		if ( ${classDescriptor.simpleName}Factory.getNumberOfTestObjectsInDataPool() == 0 )
'		{
'			return;  // Test not possible due to missing data
'		}
'		final ${classDescriptor.simpleName} result = ${classDescriptor.simpleName}Factory.createByIndex(0);
'		assertNotNull("Not null expected for ", result);
'	}
'
'	@Test
'	public void thowsExceptionForIndexOutOfRange() {
'		if ( ${classDescriptor.simpleName}Factory.getNumberOfTestObjectsInDataPool() == 0 )
'		{
'			return;  // Test not possible due to missing data
'		}
'		try {
'			${classDescriptor.simpleName}Factory.createByIndex(1000000000);
'			fail("Expected exception was not thrown!");
'		} catch (Exception e) {
'			assertEquals("Error message", "Error: Cannot provide the 1000000000th ${classDescriptor.simpleName} object. " +
'					                      "Pool contains only " + ${classDescriptor.simpleName}Factory.getNumberOfTestObjectsInDataPool() + " objects.", e.getMessage());
'		}
'	}
'	
'	@Test
'	public void returnsRandom() {
'
'		if ( ${classDescriptor.simpleName}Factory.getNumberOfTestObjectsInDataPool() == 0 )
'		{
'			return;  // Test not possible due to missing data
'		}
'
'		final ${classDescriptor.simpleName} result = ${classDescriptor.simpleName}Factory.createRandomFromDataPool();
'		assertNotNull("Not null expected for ", result);
'	}
'	

#parse("G_buildReturnsInstanceWithAllSupportedFieldsExceedingMaxLength.tpl")

'

#parse("H_buildReturnsInstanceWithAllSupportedFieldsNotReachingMinLength.tpl")		

'

#parse("I_buildReturnsExampleDataInstance.tpl")

}