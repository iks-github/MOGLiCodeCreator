@TargetFileName ${classDescriptor.simpleName}BuilderUnitTest.java # Name of output file with extension but without path
@TargetDir $model.getMetaInfoValueFor("eclipseProjectDir")/$model.getMetaInfoValueFor("projectName")/src/test/java/<package>
@CreateNew true # creates target dir if not existing and overwrites target file if existing
@NameOfValidModel MOGLiCC_JavaBeanModel

package ${classDescriptor.package}.builder;
'
import static org.junit.Assert.*;
'
import org.junit.*;
'
import java.util.*;
'
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;
'
import ${classDescriptor.package}.*;
import ${classDescriptor.package}.builder.*;
import ${classDescriptor.package}.factory.*;
import ${classDescriptor.package}.utils.*;
'
#parse("commonSubtemplates/importDomainModelClasses.tpl")
'
/**
 * Tests basic functionality of the '${classDescriptor.simpleName}Builder.'
 *
 * @author generated by MOGLiCC
 */
public class ${classDescriptor.simpleName}BuilderUnitTest {
'
'	private final static DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern("$model.getMetaInfoValueFor("dateTimeFormat")");
'

#set( $useJavaBeanRegistry = $model.getMetaInfoValueFor("useJavaBeanRegistry") )

#if ( $useJavaBeanRegistry == "true" )

	'
	'	@Before
	'	public void setup()
	'	{
	'		MOGLiCCJavaBeanRegistry.clear();
	'	}
	'
	
#end

#parse("C_buildEmptyInstanceMethod.tpl")


'

#foreach($attributeDescriptor in $classDescriptor.attributeDescriptorList)

	'
	#set( $AttributeName = $TemplateStringUtility.firstToUpperCase($attributeDescriptor.name) )
	#set( $javaType =  $attributeDescriptor.getMetaInfoValueFor("JavaType") )
	#set( $ExampleData = $attributeDescriptor.getMetaInfoValueFor("ExampleData") )
	
	'	@Test
	'	public void usesCloneWith$AttributeName() {
	'		${classDescriptor.simpleName}Builder builder1 = new ${classDescriptor.simpleName}Builder();
	
			#parse("commonSubtemplates/isJavaTypeDomainObject.tpl")
			
			#if ( $isJavaTypeDomainObject.equals( "true" ) )

				'		final $javaType instance${javaType} = ${javaType}Factory.createById("$ExampleData"); 
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( instance${javaType} );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( instance${javaType} );
									
			#elseif ( $javaType == "String" )
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}("$ExampleData");
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}("$ExampleData");

			#elseif ( $javaType == "byte" )
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}((byte) $ExampleData);
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}((byte) $ExampleData);
			
			#elseif ( $javaType == "char" )
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}('$ExampleData');
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}('$ExampleData');
				
			#elseif ( $javaType == "float" )
				
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}(${ExampleData}F);
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}(${ExampleData}F);
			
			#elseif ( $javaType == "Byte" )
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( new Byte("$ExampleData") );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( new Byte("$ExampleData") );
			
			#elseif ( $javaType == "Character" )
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( new Character('$ExampleData') );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( new Character('$ExampleData') );
				
			#elseif ( $javaType == "Float" )
				
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( new Float(${ExampleData}F) );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( new Float(${ExampleData}F) );
			
			#elseif ( $javaType == "Long" )
				
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( new Long(${ExampleData}) );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( new Long(${ExampleData}) );
				
			#elseif ( $javaType == "java.math.BigDecimal" || $javaType == "BigDecimal" )
				
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( new BigDecimal("" + ${ExampleData}) );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( new BigDecimal("" + ${ExampleData}) );
			
			#elseif ( $javaType == "org.joda.time.DateTime" || $javaType == "DateTime" ) 
				
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( dateTimeFormatter.parseDateTime( "${ExampleData}" ) );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( dateTimeFormatter.parseDateTime( "${ExampleData}" ) );
				
			#elseif ( $javaType == "String[]" )

				'		final String[] strArr${AttributeName} = CollectionsStringUtils.commaSeparatedStringToStringArray( "$ExampleData" );
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( strArr${AttributeName} );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( strArr${AttributeName} );
			
			#elseif ( $javaType == "java.util.HashSet<String>" )
			
				'		final HashSet<String> strHashSet${AttributeName} = CollectionsStringUtils.commaSeparatedStringToHashSet( "$ExampleData" );
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( strHashSet${AttributeName} );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( strHashSet${AttributeName} );
				
			#elseif ( $TemplateJavaUtility.isJavaMetaTypeGeneric($javaType) )
			
		    	#set( $CollectionType = $TemplateJavaUtility.getCollectionMetaType($javaType) ) 
			 	
				#if ($CollectionType == "java.util.List")

		    		#set( $ElementType = $TemplateJavaUtility.getCollectionElementType($javaType) )
					
					#if ($ElementType == "Long")
					
				'		final List<Long> list${AttributeName} = CollectionsStringUtils.commaSeparatedStringToLongList( "$ExampleData" );
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( list${AttributeName} );
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( list${AttributeName} );
		    		
		    		#elseif	($ElementType == "String")
		    		
						'		final List<String> strList${AttributeName} = CollectionsStringUtils.commaSeparatedStringToStringList( "$ExampleData" );
						'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( strList${AttributeName} );
						'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( strList${AttributeName} );
		    		
		    		#else
		    		
		    			#set( $elementType = $TemplateStringUtility.firstToLowerCase($ElementType) ) 
		    		
						'		final List<String> strList${AttributeName} = CollectionsStringUtils.commaSeparatedStringToStringList( "$ExampleData" );
						'		final java.util.List<${ElementType}> ${elementType}List = new ArrayList<${ElementType}>();
						'		for (final String element : strList${AttributeName}) {
						'			${ElementType} instanceById = ${ElementType}Factory.createById(element);
						'			if ( instanceById != null)
						'				${elementType}List.add(${ElementType}Factory.createById(element));
						'		}						
						'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}( ${elementType}List );
						'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}( ${elementType}List );
						
						 
		    		#end
				
				#else
				
						'		// Unkown CollectionType: $collectionType 
					
				#end 
			
			#else
			
				'		${classDescriptor.simpleName}Builder builder2 = builder1.cloneWith${AttributeName}($ExampleData);
				'		${classDescriptor.simpleName}Builder builder3 = builder1.with${AttributeName}($ExampleData);
		
			#end			
	
	'		assertFalse("clone expected", builder1.equals(builder2));
	'		assertTrue("no clone expected", builder1.equals(builder3));
	'	}
	'
	
#end
}